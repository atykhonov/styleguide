<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Chevah Style Guide</title><link href="http://styleguide.chevah.com/" rel="alternate"></link><link href="http://styleguide.chevah.com/feeds/all.atom.xml" rel="self"></link><id>http://styleguide.chevah.com/</id><updated>2014-12-11T09:52:03+00:00</updated><entry><title>Work</title><link href="http://styleguide.chevah.com/work.html" rel="alternate"></link><updated>2014-12-11T09:52:03+00:00</updated><author><name>Chevah Team</name></author><id>tag:styleguide.chevah.com,2014-12-11:work.html</id><summary type="html">&lt;div class="section" id="general"&gt;
&lt;h2&gt;General&lt;/h2&gt;
&lt;p&gt;This page tries to by the &amp;quot;style-guide&amp;quot; for your life :)&lt;/p&gt;
&lt;p&gt;Working in a distributed team can be fun, challenging but not everything is
fun and joy... and not all the time.&lt;/p&gt;
&lt;p&gt;A distributed team is scattered across different locations,
and everyone works wherever they are. People can work from home
(bedroom, living room or home office room), from co-working places or
any place they feel comfortable.&lt;/p&gt;
&lt;p&gt;If you have always done your job &amp;quot;at work&amp;quot;, the transition can be rough.
Working remotely isn't for everyone, and it can take a while to adjust to it.
Ask for advice from your team members, they have also been
through this and can share their experience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="you-are-in-control"&gt;
&lt;h2&gt;You are in control&lt;/h2&gt;
&lt;p&gt;When you work in a distributed team, you are in control.
You plan your schedule and decide where and when to work.&lt;/p&gt;
&lt;p&gt;Most difficult part is to find the motivation to work. Hopefully you enjoy
what you do at work and genuinely care about getting work done for the
project. Otherwise you might need to find another project or recognize that
distributed teams are not your style.&lt;/p&gt;
&lt;p&gt;There is nobody to tell you when to work, how to work or to check that you
are at work. It is your own style to work and you need to find ways to
improve the way you work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="stay-focus-on-what-you-do"&gt;
&lt;h2&gt;Stay focus on what you do&lt;/h2&gt;
&lt;p&gt;Try not to mix &amp;quot;at work&amp;quot; activities with &amp;quot;after work&amp;quot; activities.
Make a clear distinction between when you are &amp;quot;at work&amp;quot; an when not.
Otherwise you might be working or slacking non-stop.&lt;/p&gt;
&lt;p&gt;When you are &amp;quot;at work&amp;quot;, it does not matter how much time you spend sitting at
your desk or staring at the screen.
The only thing you have to show for your day is that you've actually got
something done.&lt;/p&gt;
&lt;p&gt;Define a time when you work and a place where you work.
Let others know about these boundaries.
When at home, other members of the house might find it hard that even if
though you're around, you're actually &amp;quot;at the office&amp;quot; working.&lt;/p&gt;
&lt;p&gt;Same boundaries apply when you are not at work or on leave / holiday.
Dedicate the weekend for non-work related activities.
Refrain from checking work email, colleagues progress or project status.
Take that time to disconnect from work, recharge your energy and motivation,
interact with your friends... just do something else.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="asynchronous-tasks"&gt;
&lt;h2&gt;Asynchronous tasks&lt;/h2&gt;
&lt;p&gt;Distributed or asynchronous work requires a completely different way to
handler tasks, in comparison with the 9 to 5 methodology.&lt;/p&gt;
&lt;p&gt;We are a team, so we still need to collaborate in order to get a task done.&lt;/p&gt;
&lt;p&gt;While working on a task you will have to wait for feedback from one or more
team members. Example review request, help with some idea... etc
Since we are not at work in the same time it will inevitable lead to
having multiple opened tasks in the same time.&lt;/p&gt;
&lt;p&gt;In order to reduce the number of parallel tasks, we need to provide quick
feedback to our team. The feedback should be no more than 48 hours, preferable
24 hours.&lt;/p&gt;
&lt;p&gt;In case a team member is delaying the feedback, get in touch with him/her
and try to hurry the feedback.&lt;/p&gt;
&lt;p&gt;Try to keep the number of parallel tasks to a manageable size of less than 5
tasks.&lt;/p&gt;
&lt;p&gt;Make sure you have the right tools so that switching between tasks is easy and
fun:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the tools should provide good support for switching between
environments or operating systems, sharing configurations or environment.&lt;/li&gt;
&lt;li&gt;review comments should be clear so that you will always know what you
need to do next.&lt;/li&gt;
&lt;li&gt;changes after review should be easy to detect and focus.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="staying-healthy"&gt;
&lt;h2&gt;Staying Healthy&lt;/h2&gt;
&lt;p&gt;Staying healthy, both physical and mental, is harder when you are on your
own.&lt;/p&gt;
&lt;p&gt;When you work from home or bedroom you tend to do little physical
effort. Fitness is something you have to pay close attention.&lt;/p&gt;
&lt;p&gt;Make sure you have a comfortable desk, chair, keyboard,
mouse and monitor. Any of these can cause short or long term injuries.
There is also the option of working from a standing desk.&lt;/p&gt;
&lt;p&gt;Being alone at work is probably the hardest part.
When you work from home, the only person you talk to all day are members of
the house. It can get pretty sad.&lt;/p&gt;
&lt;p&gt;Disconnect yourself from the work, stay away from the screen and feel
more like a social human being.
Be pro-active and invite friend for lunch, coffee, dinner,
game night, pasta night, drinks.
You shouldn't be dependent on work for social interactions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="communication"&gt;
&lt;h2&gt;Communication&lt;/h2&gt;
&lt;p&gt;Use &amp;quot;away&amp;quot; and &amp;quot;busy&amp;quot; functionality of you instant messaging tool to let other
know about your status.&lt;/p&gt;
&lt;p&gt;When you talk to someone face-to-face or voice-to-voice,
you get a lot of contextual information and unspoken messages,
and information is exchanged pretty quickly.&lt;/p&gt;
&lt;p&gt;When communicating using text messages many or these unspoken messages are
not received.
Always acknowledge that you have received and understood a text message.
Be as clear as possible and avoid subtle irony or local culture jokes.&lt;/p&gt;
&lt;p&gt;Since most of the communication is done using text, get proficient at typing.
You will write many code, emails, documents, text chats.&lt;/p&gt;
&lt;p&gt;The process of writing should encourage you to slow down,
organize and clarify your thoughts before sharing them with someone else.&lt;/p&gt;
&lt;p&gt;When things get to complicated, don't hesitate to switch to voice chat.
After a voice chat don't forget to document what was discussed by updating
a document, sending a follow up email, updating a ticket or
creating new tickets with new up tasks.&lt;/p&gt;
&lt;p&gt;Document everything in public places.
Folks can look up the information they need to see how a project's going,
how to do a task, and someone can quickly step in when a colleague is
out on vacation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tools"&gt;
&lt;h2&gt;Tools&lt;/h2&gt;
&lt;p&gt;Make sure all development tools are on your laptop.&lt;/p&gt;
&lt;p&gt;Buy a good headset and microphone.&lt;/p&gt;
&lt;p&gt;Verba volant, scripta manent. As main communication is done using text,
you can keep track of all past conversions. Configure your instant
messaging client to keep logs of all previous conversation and archive your
emails instead of deleting them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;This page was started inspired by:
&lt;a class="reference external" href="http://hoppycow.com/2012/12/26/what-its-like-to-work-future-style/"&gt;http://hoppycow.com/2012/12/26/what-its-like-to-work-future-style/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Leave / Holiday</title><link href="http://styleguide.chevah.com/leave-holiday.html" rel="alternate"></link><updated>2014-12-11T09:50:36+00:00</updated><author><name>Chevah Team</name></author><id>tag:styleguide.chevah.com,2014-12-11:leave-holiday.html</id><summary type="html">&lt;div class="section" id="general"&gt;
&lt;h2&gt;General&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We have 30 days of payed holidays per year. 21 + 9 bank holidays&lt;/li&gt;
&lt;li&gt;All legal leave and bank holidays are put in a common pool of leave days.
Use them as you like.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;All&lt;/strong&gt; leave days should be logged in the leave spreadsheets,
including bank holidays.&lt;/li&gt;
&lt;li&gt;Feel free to subscribe to notification for the leave document.&lt;/li&gt;
&lt;li&gt;When updating the table 2 days before the leave, no need for other notices,
other than editing the document. Notifications are sent each day.
You will be contacted if something needs clarification.&lt;/li&gt;
&lt;li&gt;Please try to change the document as soon as possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="vacation"&gt;
&lt;h2&gt;Vacation&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It is &lt;strong&gt;strongly recommended&lt;/strong&gt; to take at least 5 continuous days of vacation
to disconnect from the project :)&lt;/li&gt;
&lt;li&gt;A vacation is time to recharge, so stay away from the project / work.&lt;/li&gt;
&lt;li&gt;The team has to learn how to function when people are on vacation and
unavailable, however important their role is.&lt;/li&gt;
&lt;li&gt;Leave should be taken in collaboration with colleagues to ensure project
operations are not disrupted.&lt;/li&gt;
&lt;li&gt;When you run out of payed leave days just continue to record your leave days.
It is &lt;strong&gt;OK&lt;/strong&gt; if you need more holiday. Extra holiday is not payed.
Not payed leave days are subtracted from the salary
from last month of the year.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="other-legal-leaves"&gt;
&lt;h2&gt;Other legal leaves&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Other types of legal leaves are added as extra payed leave days.&lt;/li&gt;
&lt;li&gt;5 days of Marriage leaves&lt;/li&gt;
&lt;li&gt;3 days for death in the family&lt;/li&gt;
&lt;li&gt;If required, medical leaves are added to the total number of extra payed
leave days.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="unused-leaves"&gt;
&lt;h2&gt;Unused leaves&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We &lt;strong&gt;strongly recommend to take all&lt;/strong&gt; your allocated leaves.
Unused leave days for a year are reported to next year,
up to a total of 5 days.&lt;/li&gt;
&lt;li&gt;You can redeem your unused leave days as normal paid days,
up to a total of 5 days. Try to plan your time so that you don't end up
with these remaining days in the first place.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Release process</title><link href="http://styleguide.chevah.com/release-process.html" rel="alternate"></link><updated>2014-05-08T15:46:36+01:00</updated><author><name>Chevah Team</name></author><id>tag:styleguide.chevah.com,2014-05-08:release-process.html</id><summary type="html">&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#general" id="id1"&gt;General&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#release-notes" id="id2"&gt;Release Notes&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#sample-release-notes" id="id3"&gt;Sample release notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="general"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;General&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This page describes the release process and steps to be followed during
development to simplify the release or a final product or library.&lt;/p&gt;
&lt;p&gt;Releasing a product usually consists of publishing the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Binary or source archives.&lt;/li&gt;
&lt;li&gt;Documentation, which includes Release Notes, Known Issues and Upgrade Steps.&lt;/li&gt;
&lt;li&gt;Public announcement. Notification email or website news/blog article.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="release-notes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Release Notes&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Release notes explain what changed with this version. &lt;strong&gt;Period&lt;/strong&gt;.
Release notes are &lt;strong&gt;not&lt;/strong&gt; installation, upgrade or configuration.&lt;/p&gt;
&lt;p&gt;Each time a branch fixes a bug, adds a new feature or makes any changes
which are visible to end users a new entry is added inside the release notes
file. A release note entry is a summary for one change.&lt;/p&gt;
&lt;p&gt;We keep release notes for all versions in a single file so that users can
easily read all changes starting from their version up to latest or a
specific version.&lt;/p&gt;
&lt;p&gt;Release notes are grouped in one of the following categories. The category
may be omitted if no changes were added for it. Here are some categories:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
* New features
* Bug fixes
* Deprecation
* Removals
* Other changes. Documentation changes.
&lt;/pre&gt;
&lt;p&gt;A marker/tag is added at the end of the sentence to point the ticket ID
associated with this change. Ticket ID marker is not mandatory for new features.&lt;/p&gt;
&lt;p&gt;It can be followed by a list of tags to help users understand / filter the
scope of the change. Here are some examples:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
* ``[https]`` - for changes affecting only a sub-system.
* ``[aix]`` - for changes affecting only AIX systems.
* ``[windows]`` - for changes affection only Windows system.
&lt;/pre&gt;
&lt;p&gt;Remember your audience/user/clients and write for that audience.&lt;/p&gt;
&lt;p&gt;Don't explain all details of the change. When more details are required
use a link to documentation.&lt;/p&gt;
&lt;p&gt;All entries should be complete sentences or phrases, ending with a
punctuation mark.&lt;/p&gt;
&lt;p&gt;Use present tense as opposed to past tense. The text should state what the
change &lt;strong&gt;does&lt;/strong&gt; and not what it &lt;strong&gt;did&lt;/strong&gt;.
&amp;quot;Product no longer falls over X.&amp;quot; as opposed to &amp;quot;Product fell over X.&amp;quot;.&lt;/p&gt;
&lt;p&gt;Write text in &lt;strong&gt;resolution&lt;/strong&gt; form, describe what impact the change will have
on users. What will the users notice?&lt;/p&gt;
&lt;p&gt;If a single sentence isn't clear enough to understand, explaining the
background of the change can be helpful, by adding in
&lt;cite&gt;Previously, X used to do Y.&lt;/cite&gt; or &lt;cite&gt;Previously, X used to do Y. Now Z.&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;Don't add low-level, internal details about product logic. Focus on how
the change affects / is perceived by the user.&lt;/p&gt;
&lt;p&gt;Here are some examples:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Support was added for doing / integrating with X.&lt;/li&gt;
&lt;li&gt;Users now can do X.&lt;/li&gt;
&lt;li&gt;It is no longer possible to do Y.&lt;/li&gt;
&lt;li&gt;The text on the ABC form is now Z.&lt;/li&gt;
&lt;li&gt;Reworded text from X to be gender neutral.&lt;/li&gt;
&lt;li&gt;Doing X on a session in state Y no longer gives the XYZ error.&lt;/li&gt;
&lt;li&gt;Fix the XZY error generated when client was doing X on a session in Y state.&lt;/li&gt;
&lt;li&gt;Previously, users were unable to upload files to a folder if they
had write permissions.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="sample-release-notes"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id3"&gt;Sample release notes&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
Release Notes
=============

This is the list of all changes for PRODUCT NAME releases.


Version 1.2.3, released 24/02/2014
----------------------------------


New features
^^^^^^^^^^^^

* Support was added to transfer files using SCP over SSH.
  Read more... [scp]
* SFTP protocol now support reading and creating symbolic links on
  Windows. [sftp][windows]


Defect fixes
^^^^^^^^^^^^

* Fix an internal server error when SSH client requests
  to execute a command, a shell or a pseudo-terminal. [sftp][scp]


Deprecations
^^^^^^^^^^^^

* It is no longer possible to do X. [#1359][unix]


Removals
^^^^^^^^

* Windows XP is no longer supported. [#2345]
* Configuration option X, deprecated since Product version 12.1.2, is now
  removed. [#1366]


Other changes
^^^^^^^^^^^^^

* The howto document page of X now has documentation about doing Y. [#2452]


Version 1.1.0, released 14/02/2013
----------------------------------

INFO FOR PREVIOUS RELEASE.
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Bash</title><link href="http://styleguide.chevah.com/bash.html" rel="alternate"></link><updated>2014-05-08T15:39:34+01:00</updated><author><name>Chevah Team</name></author><id>tag:styleguide.chevah.com,2014-05-08:bash.html</id><summary type="html">&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#general" id="id1"&gt;General&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#path-constants" id="id2"&gt;Path constants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#function-definition" id="id3"&gt;Function Definition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#case-syntax" id="id4"&gt;Case Syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#if-then-else" id="id5"&gt;IF/THEN/ELSE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#for" id="id6"&gt;FOR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#while-until" id="id7"&gt;WHILE/UNTIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#references" id="id8"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="general"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;General&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Shell scripts should be kept at a minimum and &lt;strong&gt;only&lt;/strong&gt; for internal scripts.
For all other things there is Python.&lt;/li&gt;
&lt;li&gt;If any, public scripts should use &lt;tt class="docutils literal"&gt;/bin/sh&lt;/tt&gt;. Bash is not available on all
Unix systems and ksh or other shells are not compatible with Bash syntax.&lt;/li&gt;
&lt;li&gt;Use &lt;tt class="docutils literal"&gt;printf&lt;/tt&gt; instead of &lt;tt class="docutils literal"&gt;echo&lt;/tt&gt; when using  &lt;tt class="docutils literal"&gt;/bin/sh&lt;/tt&gt; as a shell,
because &lt;tt class="docutils literal"&gt;echo&lt;/tt&gt; behaviour is incompatible in Bash and Korn shells.
Eg. use &lt;tt class="docutils literal"&gt;printf&lt;/tt&gt; instead of &lt;tt class="docutils literal"&gt;echo &lt;span class="pre"&gt;-n&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;printf &amp;quot;blabla\n&amp;quot;&lt;/tt&gt; instead
of &lt;tt class="docutils literal"&gt;echo &amp;quot;blabla&amp;quot;&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;For internal scripts we should use &lt;tt class="docutils literal"&gt;/bin/bash&lt;/tt&gt;, as the default &lt;tt class="docutils literal"&gt;/bin/sh&lt;/tt&gt;
sometimes points to a lesser shell such as Dash.&lt;/li&gt;
&lt;li&gt;A function called main is required for scripts long enough to contain at
least one other function.&lt;/li&gt;
&lt;li&gt;Put all functions together in the file just below constants. Don't hide
executable code between functions.&lt;/li&gt;
&lt;li&gt;Use uppercase for all GLOBAL variables.&lt;/li&gt;
&lt;li&gt;In tests, enclose all uncontrolled string variables in double quotes to
handle empty strings or spaces in variables.&lt;/li&gt;
&lt;li&gt;Always double quote the &lt;tt class="docutils literal"&gt;$&amp;#64;&lt;/tt&gt; variable to keep all arguments with spaces.&lt;/li&gt;
&lt;li&gt;Pipelines should be split one per line if they don't all fit on one line.&lt;/li&gt;
&lt;li&gt;Use $(command) instead of backticks. Nested backticks require escaping the
inner ones with . The $(command) format doesn't change when nested and is
easier to read. See the example below&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# This is preferred:&lt;/span&gt;
&lt;span class="nv"&gt;var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$(command &amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;command1&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# This is not:&lt;/span&gt;
&lt;span class="nv"&gt;var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;`command \`command1\``&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Always guard your Bash scripts from unexpected errors by using&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;set&lt;/span&gt; -o nounset
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="path-constants"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Path constants&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When defining a directory path as a constant, you should include the trailing
slash to make sure it is a directory and not a file. Two consecutive /'s are
harmless in POSIX shells as long as they are not at the beginning of the path
in some exotic environment such as Cygwin that actually uses this notation for
SMB shares.&lt;/p&gt;
&lt;p&gt;Always double quote path constants to handle files with spaces:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;SOME_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/some/path/
&lt;span class="c"&gt;# and use it like this:&lt;/span&gt;
&lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;${SOME_PATH}/some.file&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# Another example&lt;/span&gt;
&lt;span class="nv"&gt;REMOTE_URI&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;chevah@chevah.com:/home/chevah/styleguide.chevah.com/vm/
scp &lt;span class="s2"&gt;&amp;quot;$LOCAL_FILE&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;${REMOTE_URL}/file&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;SOME_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/some/path/
&lt;span class="c"&gt;# and then:&lt;/span&gt;
&lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;${SOME_PATH}some.file&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="function-definition"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Function Definition&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Leave 2 blank lines between function definitions and always use &lt;tt class="docutils literal"&gt;local&lt;/tt&gt; for
local variable declaration.&lt;/p&gt;
&lt;p&gt;Define local variables at the start of the function, in a distinct block.
It is recommended to define a local variable named &lt;cite&gt;result&lt;/cite&gt; to hold the value
produced by calling the function.&lt;/p&gt;
&lt;p&gt;Put the final returned result in a separate block.&lt;/p&gt;
&lt;p&gt;Procedures are functions which have no result.&lt;/p&gt;
&lt;p&gt;Since Bash only support returning numeric values, which are interpreted
as exit codes, we will pass values between functions by using &lt;tt class="docutils literal"&gt;echo&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# Description of function 1.&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# * $1 - description of first argument&lt;/span&gt;
&lt;span class="c"&gt;# * $2 - description of second argument&lt;/span&gt;
&lt;span class="c"&gt;# * return - description of return value.&lt;/span&gt;

function1&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;local &lt;/span&gt;variable_which_is_local
    &lt;span class="nb"&gt;local &lt;/span&gt;result

    do_some_action_here
    do_more_action

    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;


&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# Description of procedure 1.&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# It does this and this.&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
procedure1&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;something&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;function1 ARG1&lt;span class="k"&gt;)&lt;/span&gt;

    do_something_else something
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="case-syntax"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Case Syntax&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$VARIABLE_NAME&amp;quot;&lt;/span&gt; in
    &lt;span class="s2"&gt;&amp;quot;option1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;do &lt;/span&gt;specific
        ;;
    option2*&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;do &lt;/span&gt;generic
        ;;
    *&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;do &lt;/span&gt;default
        ;;
&lt;span class="k"&gt;esac&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="if-then-else"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;IF/THEN/ELSE&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if &lt;/span&gt;TEST; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;call something
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$string&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; OTHER_TEST &lt;span class="o"&gt;]&lt;/span&gt;; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;call something_else
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;call something_else_completely
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="for"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;FOR&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for &lt;/span&gt;CONDITION; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;call something
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="while-until"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;WHILE/UNTIL&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;while &lt;/span&gt;TEST; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;call something
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;References&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here are the pages I used to create this page.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.davidpashley.com/articles/writing-robust-shell-scripts/"&gt;http://www.davidpashley.com/articles/writing-robust-shell-scripts/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.linuxjournal.com/content/return-values-bash-functions"&gt;http://www.linuxjournal.com/content/return-values-bash-functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</summary></entry><entry><title>CSS, LESS and Styles</title><link href="http://styleguide.chevah.com/css.html" rel="alternate"></link><updated>2014-05-08T15:39:34+01:00</updated><author><name>Chevah Team</name></author><id>tag:styleguide.chevah.com,2014-05-08:css.html</id><summary type="html">&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#css-syntax-elements" id="id1"&gt;CSS Syntax Elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#general" id="id2"&gt;General&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#css-class-naming" id="id3"&gt;CSS Class naming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#rules-definition" id="id4"&gt;Rules definition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#layout-and-typography-separation" id="id5"&gt;Layout and Typography separation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;The CSS Coding conventions are inspired by &lt;a class="reference external" href="http://www.phpied.com/css-coding-conventions"&gt;Stoyan Stefanov's CSS Coding
Conventions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Many of them are automatically checked using pocket-lint that now included
the CSS Coding Convention Checker.
Please report any problems that you have with running &lt;tt class="docutils literal"&gt;paver lint&lt;/tt&gt; or
if some errors are not identified by &lt;tt class="docutils literal"&gt;paver lint&lt;/tt&gt;&lt;/p&gt;
&lt;div class="section" id="css-syntax-elements"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;CSS Syntax Elements&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When describing the CSS rules, we will use the following terminology.&lt;/p&gt;
&lt;img alt="CSS Selector Graphic" src="http://www.w3schools.com/css/selector.gif" /&gt;
&lt;/div&gt;
&lt;div class="section" id="general"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;General&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use C++ comments style (/* comment here */) and not C style (//) as they
are not supported by CSS2 and there are problems in some browsers.
Also, on LESS C style comments (//) are ignored in the final result.&lt;/li&gt;
&lt;li&gt;Avoid using short CSS notation. They are harder to read and the diff
generated by changing short notations is less explicit.&lt;/li&gt;
&lt;li&gt;Avoid using IDs when defining styles as they discourage style reuse...
and then you risk to repeat yourself.&lt;/li&gt;
&lt;li&gt;Put general styles in ''styles.css'' and don't put page specific styles.&lt;/li&gt;
&lt;li&gt;Page specific styles can be included using a different file.&lt;/li&gt;
&lt;li&gt;Use upper letter for color HEX code. Good #F9A0C5 , BAD #f9a0c5&lt;/li&gt;
&lt;li&gt;Don't use color names or rba, just HEX code.&lt;/li&gt;
&lt;li&gt;Use 4 space indentation.&lt;/li&gt;
&lt;li&gt;End a property-value with semi-colon.&lt;/li&gt;
&lt;li&gt;Separate each rule by a blank line.&lt;/li&gt;
&lt;li&gt;Put unrelated rule in different files.&lt;/li&gt;
&lt;li&gt;LESS constants (variables) should be dahs-separated and only low cases:
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;#64;good-constant&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="css-class-naming"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;CSS Class naming&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The most important thing to have in mind is the content nature of the
HTML document, not its presentation. Selector names should describe the
content semantic and &lt;tt class="docutils literal"&gt;not how it looks&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Don't use abbreviation. Use 'header' instead of 'hdr' or 'head'.&lt;/li&gt;
&lt;li&gt;Avoid presentation-specific words in the name,
like &lt;tt class="docutils literal"&gt;blue&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;text-gray&lt;/span&gt;&lt;/tt&gt;, or &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;light-box&lt;/span&gt;&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Add namespaces using a dash (-) as a separator.&lt;/li&gt;
&lt;li&gt;Distinct words in the class name are separated by a dash.&lt;/li&gt;
&lt;li&gt;Names are lowercase.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="rules-definition"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Rules definition&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The property will be followed by colons and then a space.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Good:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.some-class {
    float: center;
}
&lt;/pre&gt;
&lt;p&gt;Bad:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.some-class {
    float:center;
}
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Put each selector on a single line and separate them using comma.
In this was it is easier to see the selector when using multiple selectors.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Good:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.some-class,
p a.class {
    float: center;
}
&lt;/pre&gt;
&lt;p&gt;Bad:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.some-class, p a.class {
    float: center;
}
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The closing bracket should be the only character from a line.
It should not be indented.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Good:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.some-class {
  float: center;
}
&lt;/pre&gt;
&lt;p&gt;Bad:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.some-class
{
    float: center;
    }

.some-class {
    float: center; }

.some-class, .another { float: center; }
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The opening bracket should be on a the same line as the last selector.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Good:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.some-class {
    float: center;
}

.some-class,
.another-class {
    float: center;
}
&lt;/pre&gt;
&lt;p&gt;Bad:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.some-class
{
    float: center;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="layout-and-typography-separation"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Layout and Typography separation&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Don't put typography properties in the same rule with layout properties&lt;/li&gt;
&lt;li&gt;The idea it that when you change or remove a typographic rule, the layout will not be affected.&lt;/li&gt;
&lt;li&gt;Use this with moderation, sometimes it is ok to set a margin or padding for H1 or P tag... but don't abuse this.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GOOD:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
product-name {
    font-style: underline:
    color: red;
    }

highlighted-box {
    float: center;
    width: 30px;
    background-color: blue;
    }
&lt;/pre&gt;
&lt;p&gt;BAD:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
product-name {
    font-style: underline:
    color: red;
    float: center;
    width: 30px;
    background-color: blue;
    }
&lt;/pre&gt;
&lt;/div&gt;
</summary></entry><entry><title>Generic</title><link href="http://styleguide.chevah.com/generic.html" rel="alternate"></link><updated>2014-05-08T15:39:34+01:00</updated><author><name>Chevah Team</name></author><id>tag:styleguide.chevah.com,2014-05-08:generic.html</id><summary type="html">&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#general" id="id1"&gt;General&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#comments" id="id2"&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#exceptions-handling" id="id3"&gt;Exceptions handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#project-specific" id="id4"&gt;Project specific&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="general"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;General&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The content of this website is intended to help new team members understand
the direction of our team.&lt;/p&gt;
&lt;p&gt;It also helps novice and advance beginners by providing a set of simple rules.
Anyone should read this as best practice and provide feedback in case
something is wrong.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Rule #1: Keep it DRY! Don't repeat yourself!&lt;/li&gt;
&lt;li&gt;Rule #2: KISS - Keep it simple, stupid simple!&lt;/li&gt;
&lt;li&gt;All code in any code-base should look like a single person typed it, no
matter how many people contributed.&lt;/li&gt;
&lt;li&gt;No single person is responsible for a part of the code. We write code
together, we take the blame together, we take the glory together.
Once a code was approved for review, reviewers are also responsible for
that code.&lt;/li&gt;
&lt;li&gt;Write all code as it will be written once and read thousand times.
Write code for maximum readability.&lt;/li&gt;
&lt;li&gt;When you need a trade-off between readability and code duplication, choose
to have a code less readable but without duplication.&lt;/li&gt;
&lt;li&gt;Write code as it will be used by humans, not a machine. You are not a
a compiler / interpretor.&lt;/li&gt;
&lt;li&gt;Optimization should come second and only if really needed. Don't Use clever
tricks and other optimization to early.&lt;/li&gt;
&lt;li&gt;Do the simplest thing that could possibly work and do it well.
Always work on the story you have, not something you think we're going to
need sometime in the future.
Don't try implement all usecases you can think of and end with poorly
designed code and poorly tested code.&lt;/li&gt;
&lt;li&gt;Try to keep methods as flat as possible and return as soon as possible.&lt;/li&gt;
&lt;li&gt;Don't use abbreviation. Use full, meaningful names.&lt;/li&gt;
&lt;li&gt;Don't use tabs for indentation, and in general don't use tabs for anything
else. The only exceptions are the Makefiles.&lt;/li&gt;
&lt;li&gt;Favor indentation using 4 spaces. For deep nested languages (HTML, JS) it
is OK to use 2 spaces.&lt;/li&gt;
&lt;li&gt;Maximum line length is 78 characters.&lt;/li&gt;
&lt;li&gt;Don't mix multiple languages in a single file.&lt;/li&gt;
&lt;li&gt;No need for the ultimate purism, when using / calling code from external
libraries it is OK if those calls don't comply with coding convention.&lt;/li&gt;
&lt;li&gt;When extending external libraries use the coding convention used by that
library. It might be harder to define the border of those changes but this
should help with sending patches upstream.&lt;/li&gt;
&lt;li&gt;When reporting a code related problem, use
&lt;a class="reference external" href="http://sscce.org"&gt;Short, Self Contained, Correct (Compilable), Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Each repository / project will have a README file describing why it exists
and what it should do.
The README should also include notes about contributing to the project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Each repository will have a LICENSE and AUTHORS files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Technical dept comments (ex FIXME, TODO) will always have an attached
ticket ID and will use the following format. Only &lt;strong&gt;FIXME&lt;/strong&gt; marker is used
followed by ticket ID. Comments will come on a new lines.
Adapt this to the style of comments use in the specific language, but
is important to keep the &lt;strong&gt;FIXME:123:&lt;/strong&gt; marker.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# FIXME:1234:
# Details about this tech-dept. Ex: Can only be fixed when full moon.
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Words are an important part of how software works.
Even though there may be dozens of people creating a product, reading
comments, documentation, notes etc, it should still sound like we speak
in one consistent voice.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;When writing text for the documentation or text that appears in the
program favour classy over cute or mechanical.
Respect the reader, act more like a human and less like a computer,
and use fewer words:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Instead of:

Successfully deleted the #{branch_name} branch.

Try something like:

The #{branch_name} branch has been deleted.
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Use a graphical commit tool (&lt;tt class="docutils literal"&gt;git gui&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;gitg&lt;/tt&gt;) for doing the commit.
In this way you can split the changes in multiple commits and you can also
do a first review just before the commit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;When you don't understand something related to security, don't just walk
by and ignore it. Try to understand what is happening there, or ask
someone else to take a look or to explain it to you.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Don't abuse inheritance and favour composition and delegation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Write code so that it can be read / used by developers having a work
style different than yours. Don't add IDE / text editor specific things
Don't assume that other developer will use the same IDE / text editor,
fancy keyboard (or foot pedals), array of huge monitors...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;When you have a non-trivial conditional expression (logical condition from
an if statement), break it in smaller sub-conditionals.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Long conditional which is not that bad.&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MAX_SIZE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;destination&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;ACTIVE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;destination&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;PAUSED&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
  &lt;span class="n"&gt;do_domething&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c"&gt;# But can be better.&lt;/span&gt;
&lt;span class="n"&gt;source_not_full&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MAX_SIZE&lt;/span&gt;
&lt;span class="n"&gt;destination_available&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;destination&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;ACTIVE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;destination&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;PAUSED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;source_available&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;destination_available&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c"&gt;# Or even better.&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;MAX_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
  &lt;span class="nd"&gt;@property&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;full&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MAX_SIZE&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Destination&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;ACTIVE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="n"&gt;PAUSED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="n"&gt;STOPPED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
  &lt;span class="n"&gt;FAILDED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

  &lt;span class="nd"&gt;@property&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;destination&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ACTIVE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;destination&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PAUSED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;full&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;destination&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="comments"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Comments&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;All comments should be valid sentences and should end with a full stop (.).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Try to write code so that it speak for itself and so that a comment is not
required.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Try to name variables, methods, function so that they communicate their
intend. A comment is only attached to the place where the name is defined,
and not present in all other multiple places where it is used. IDE can help,
but we should not rely on that.&lt;/p&gt;
&lt;p&gt;When a comment is required is like saying: I have no idea for a better name
for this thing, so here is my poor comment. Good luck with figuring the
intend of this name when you see the it in the rest of this file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Well commented code is extremely important. Take time to describe
components, how they work, their limitations, and the way they are
constructed. Don't leave others in the team guessing as to the purpose
of uncommon or non-obvious code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Place comments on a new line above their subject.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Avoid end of line comments. End of line comments can be used for lint
ignores and other hints for automated tools... but not for humans.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="exceptions-handling"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Exceptions handling&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here are some simple generic rules for working with exceptions.&lt;/p&gt;
&lt;p&gt;In Chevah project we use 2 major &amp;quot;kinds&amp;quot; of exceptions:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;cite&gt;Errors&lt;/cite&gt; are top level exceptions that are not going to be handled
internally by the package / library.&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;Exceptions&lt;/cite&gt; normal exceptions, passed inside the package/library to signal
various conditions. The public API for the package/library should not raise
this kind of exceptions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Exceptions can take any format, and most of the time they can contain only
a text with some details about the error. These exceptions are low level
and should be raised in simple conditions.&lt;/p&gt;
&lt;p&gt;Errors should have an unique ID and a data attribute.
Each ID should be raised from a single place.
The data attribute is a dictionary with key / values that make sense for the
error.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="project-specific"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Project specific&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Each log message should be documented, listing format, introduction version,
version since it was obsolete, log type, conditions in which it is raised
and other informations that can be useful for users.&lt;/li&gt;
&lt;li&gt;A logging messages should only be called from a single place in the code.
This will greatly help with support and debugging.&lt;/li&gt;
&lt;li&gt;A logging message should have a unique ID. This will help the support team
by pointing a specific event. It will also help when localized logs are
used.&lt;/li&gt;
&lt;li&gt;If a logging message should be issued from multiple places, move the
logging call into a dedicated helper method. This will help with
automatic detection of accidentally using same message ID for different
logs.&lt;/li&gt;
&lt;li&gt;Components should not issue logging messages that are outside of
theirs scope, but rather use exceptions to pass the log informations.&lt;/li&gt;
&lt;li&gt;If there are no other options, rather than directly issuing a logging
message, the component should call a function located in the component
that 'owns' the log ID that will issue the log.&lt;/li&gt;
&lt;li&gt;All branches will need to use the following convention:
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;TICKETNO-SHORT_DESCRIPTION&lt;/span&gt;&lt;/tt&gt;. By having a reference to a ticket, it will
be much easier to track and keep a record of branch purpose and its
development.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
447-add_sqlite_log
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Each user configuration options should be documented,
listing valid values, place where the configuration is located,
introduction version, version since it was obsolete,
together with a description of the purpose and effect.&lt;/li&gt;
&lt;li&gt;Configuration options will be documented using the following format. Please
note the order in which fields are defined, the name of the files and the
format for declaring possible values. All fields should be present, and
if no value is defined, use 'None' or leave it blank.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="literal-block"&gt;
log_file
--------

:Optional: Yes
:Default value: `log/server.log`
:Values: * `some value`
         * `other value` - short description or this value.
         * `yet another value`
:Available from version: 1.6.0
:Available up to version: 2.0.3
:Description:
    This is the long description of the configuration option. It can
    span multiple lines.

    It can also span multiple paragraph.

    This should be the place to describe in details available values
    that can be set.
&lt;/pre&gt;
&lt;/div&gt;
</summary></entry><entry><title>HTML, XML and other markups</title><link href="http://styleguide.chevah.com/html.html" rel="alternate"></link><updated>2014-05-08T15:39:34+01:00</updated><author><name>Chevah Team</name></author><id>tag:styleguide.chevah.com,2014-05-08:html.html</id><summary type="html">&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#general" id="id1"&gt;General&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#css-interaction" id="id2"&gt;CSS interaction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#html-tags-usage" id="id3"&gt;HTML tags usage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="general"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;General&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Unlike other files, indentation for XML/HTML is 2 spaces.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Don't use inline HTML style attribute. Only CSS class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Use HTML5 doctype:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;!doctype html&amp;gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="css-interaction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;CSS interaction&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Make sure all elements that are used in JS have an ID.
This helps with testing.&lt;/li&gt;
&lt;li&gt;Make sure all related elements have the same class.&lt;/li&gt;
&lt;li&gt;Make sure that a page will not contain the same ID more than once.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="html-tags-usage"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;HTML tags usage&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Don't use new HTML5 elements/tags and API.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Don't use deprecated HTML4 elements/tags.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Paragraphs of text should always be placed in a &amp;lt;p&amp;gt; tag.
Never use multiple &amp;lt;br/&amp;gt; tags.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Items in list form should always be in &amp;lt;ul&amp;gt;, &amp;lt;ol&amp;gt;, or &amp;lt;dl&amp;gt;,
Never a set of &amp;lt;div&amp;gt; or &amp;lt;p&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Every form input that has text attached should utilize a &amp;lt;label&amp;gt; tag.
Especially radio or checkbox elements.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Use double quotes for tag/element attributes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Even though quotes around attributes is optional, always put quotes around
attributes for readability:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
GOOD: &amp;lt;p class=&amp;quot;line note&amp;quot; data-attribute=&amp;quot;106&amp;quot;&amp;gt;
        This is my paragraph of special text.&amp;lt;/p&amp;gt;
BAD : &amp;lt;p class=&amp;quot;line note&amp;quot; data-attribute=106&amp;gt;
        This is my paragraph of special text.&amp;lt;/p&amp;gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Make use of &amp;lt;thead&amp;gt;, &amp;lt;tfoot&amp;gt;, &amp;lt;tbody&amp;gt;, and &amp;lt;th&amp;gt; tags (and Scope attribute)
when appropriate. (note: &amp;lt;tfoot&amp;gt; goes above &amp;lt;tbody&amp;gt; for speed reasons.
You want the browser to load the footer before a table full of data.):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;table summary=&amp;quot;This is a chart of invoices for 2011.&amp;quot;&amp;gt;
  &amp;lt;thead&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th scope=&amp;quot;col&amp;quot;&amp;gt;Table header 1&amp;lt;/th&amp;gt;
      &amp;lt;th scope=&amp;quot;col&amp;quot;&amp;gt;Table header 2&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/thead&amp;gt;
  &amp;lt;tfoot&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;Table footer 1&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;Table footer 2&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/tfoot&amp;gt;
  &amp;lt;tbody&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;Table data 1&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;Table data 2&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>JavaScript</title><link href="http://styleguide.chevah.com/javascript.html" rel="alternate"></link><updated>2014-05-08T15:39:34+01:00</updated><author><name>Chevah Team</name></author><id>tag:styleguide.chevah.com,2014-05-08:javascript.html</id><summary type="html">&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#general" id="id1"&gt;General&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#defining-classes" id="id2"&gt;Defining classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#css-interaction" id="id3"&gt;CSS interaction&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#js-related-css-class" id="id4"&gt;JS related CSS class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#changing-css-html-from-js" id="id5"&gt;Changing CSS/HTML from JS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#test-styleguide" id="id6"&gt;Test styleguide&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#rerefences" id="id7"&gt;Rerefences&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="general"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;General&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Variable declarations must start with 'var'.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Do your best to never use a semicolon.
This means avoiding them at line breaks and avoiding multi-statement lines.
Semi-colon at the end of the line is added only when required.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Use 4 space indentation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Variable, function, method and constants name are after PEP8.
variable_name, function_name, methodName, ClassName, CONSTANT_NAME&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Callback methods should always end with 'Callback' as the
method / function name. This is a reminder of the fact that
the context is lost.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Constructor functions (those that are called with &lt;strong&gt;new&lt;/strong&gt;) should use
class naming convention.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;use &lt;tt class="docutils literal"&gt;===&lt;/tt&gt; instead of &lt;tt class="docutils literal"&gt;==&lt;/tt&gt; for comparison. &lt;tt class="docutils literal"&gt;===&lt;/tt&gt; doesn't do type
coercion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Only use &lt;tt class="docutils literal"&gt;typeof&lt;/tt&gt; for checking against undefined variables:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
typeof foo !== 'undefined'
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;For all other type checking use the custom defined typeOf() function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Try to avoid the usage of &lt;tt class="docutils literal"&gt;instanceof&lt;/tt&gt; and don't use it for native types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Create new arrays using the array literals &lt;tt class="docutils literal"&gt;[]&lt;/tt&gt; notation. Don't use
&lt;tt class="docutils literal"&gt;new Array()&lt;/tt&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Iterate arrays using the classic &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; loop:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
var list = [1, 2, 3, 4, 5, ...... 100000000];
for (var i = 0, l = list.length; i == l; i++) {
    console.log(list[i]);
}
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Always define the variable used to iterate in a &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; loop.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Don't use &lt;tt class="docutils literal"&gt;eval&lt;/tt&gt; and don't pass strings to &lt;tt class="docutils literal"&gt;setTimeout&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;setInterval&lt;/tt&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Use &lt;tt class="docutils literal"&gt;undefined&lt;/tt&gt; instead of the the traditional &lt;tt class="docutils literal"&gt;null&lt;/tt&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Keep braces on the same line as their corresponding statements. Never omit
them for single-line if / else statements.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;something&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// code here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// code here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;duppy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;something&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Leave 2 empty lines between global function or class definitions.
Leave 1 empty line between functions from the same class.
Global variable can be grouped and the don't require empty lines in between.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;GLOBAL_DAY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;GLOBAL_YEAR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;


&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;Docstring for duppy.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;duppy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Do something here.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;Docstring for duppy_doo.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;duppy_doo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Do something here.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;A simple mock for Browser service.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MockBrowser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_cookies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;    Docstring for MockBrower.setCookies()&lt;/span&gt;
&lt;span class="cm"&gt;    */&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setCookie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Implementation here.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;    Docstring here.&lt;/span&gt;
&lt;span class="cm"&gt;    */&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;doSomethingElse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Implementation here.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_methodWihoutDocstring&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Implementation here.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Avoid using leading parenthesis.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Avoid using &lt;tt class="docutils literal"&gt;delete&lt;/tt&gt; operator and only use it to delete explicitly
set properties on normal objects:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
var obj = {x: 1};
obj.y = 2;
delete obj.x;  // true
delete obj.y;  // true
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Use single quote for strings.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
In HTML, we use &amp;quot; as quotes around attribute values, like this:

&amp;lt;a href=&amp;quot;foo&amp;quot;&amp;gt;bar&amp;lt;/a&amp;gt;
In JavaScript, we use ' as much as possible.

alert('qux');
This way, we can use consistent quotes when writing HTML inside of JS:

alert('&amp;lt;a href=&amp;quot;foo&amp;quot;&amp;gt;bar&amp;lt;/a&amp;gt;')
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;REST web services should always return a valid dictionary
and not an Array or a primitive. JSON-RPC is forced to return a dictionary
by the protocol.&lt;/li&gt;
&lt;li&gt;Callbacks called from the GUI / DOM should be prefixed with &lt;cite&gt;on&lt;/cite&gt;.
Ex: onAuthentication (when authenticate button is pressed),
onLogout (when logout link is pressed),
onLoginFormSubmit (when login form is submitted)&lt;/li&gt;
&lt;li&gt;Callbacks/Errback for XHR are be prefixed with &lt;cite&gt;cb&lt;/cite&gt; and &lt;cite&gt;eb&lt;/cite&gt;, similar
with Python/Twisted convention.&lt;/li&gt;
&lt;li&gt;For one line comments, leave one empty space after the comment marker.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Good comment line.&lt;/span&gt;
&lt;span class="c1"&gt;//Bad comment line.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;For multi line comments use the following convention.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;Short single line comment title.&lt;/span&gt;
&lt;span class="cm"&gt;More details about what is here and&lt;/span&gt;
&lt;span class="cm"&gt;here and here.&lt;/span&gt;

&lt;span class="cm"&gt;Feel free to create paragraphs separation.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Global constants will follow the CONSTANT_NAME naming convention.&lt;/li&gt;
&lt;li&gt;Global services (objects with methods) are named similar to class names.
Most of the time they will be singletons so there will be no associated
class.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Shell&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ActiveXObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;WScript.Shell&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bla&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Shell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method_usage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;TODO
&lt;a class="reference external" href="http://javascript.crockford.com/code.html"&gt;http://javascript.crockford.com/code.html&lt;/a&gt; &lt;a class="reference external" href="http://jibbering.com/faq/notes/code-guidelines/"&gt;http://jibbering.com/faq/notes/code-guidelines/&lt;/a&gt; &lt;a class="reference external" href="http://neil.rashbrook.org/Js.htm"&gt;http://neil.rashbrook.org/Js.htm&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="defining-classes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Defining classes&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In JS there is no strict way of defining a class and instances are created
using a function and new operator.&lt;/p&gt;
&lt;p&gt;When defining a class we use an anonymous function to allow class
private instances and create a new class scope.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;BaseAccount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;class_private_member&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

    &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;    Constructor is here.&lt;/span&gt;
&lt;span class="cm"&gt;    */&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;class_member&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

    &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;    Base method.&lt;/span&gt;
&lt;span class="cm"&gt;    */&lt;/span&gt;
    &lt;span class="nx"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;base_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;    Some method.&lt;/span&gt;
&lt;span class="cm"&gt;    */&lt;/span&gt;
    &lt;span class="nx"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;some_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;prefix&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;base_method&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;    Another method.&lt;/span&gt;
&lt;span class="cm"&gt;    */&lt;/span&gt;
    &lt;span class="nx"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tuned&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cls&lt;/span&gt;
&lt;span class="p"&gt;}())&lt;/span&gt;


&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;SpecialAccount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;variant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;light&amp;#39;&lt;/span&gt;
        &lt;span class="cm"&gt;/* Something similar to super()*/&lt;/span&gt;
        &lt;span class="nx"&gt;BaseAccount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/* Something similar to inheritance. */&lt;/span&gt;
    &lt;span class="nx"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BaseAccount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;constructor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cls&lt;/span&gt;

    &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;    Method extending parent.&lt;/span&gt;
&lt;span class="cm"&gt;    */&lt;/span&gt;
    &lt;span class="nx"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;some_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;BaseAccount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;some_method&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;prefix&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-child-&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;    Method overwriting parent.&lt;/span&gt;
&lt;span class="cm"&gt;    */&lt;/span&gt;
    &lt;span class="nx"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tuned&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cls&lt;/span&gt;
&lt;span class="p"&gt;}())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="css-interaction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;CSS interaction&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="js-related-css-class"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id4"&gt;JS related CSS class&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Try to append js- to all javascript-based selectors. This is taken from
&lt;a class="reference external" href="http://ozmm.org/posts/slightly_obtrusive_javascript.html"&gt;slightly obtrusive javascript&lt;/a&gt;. The idea is that you should be able to tell
a presentational class from a functional class.&lt;/p&gt;
&lt;p&gt;There are good things and bad things about &amp;quot;Unobtrustive JavaScript.&amp;quot;
One bad thing: it's hard to tell what JavaScript is touching an element.&lt;/p&gt;
&lt;p&gt;Only ever use classes and ids prefix with js- when touching the DOM with
JavaScript.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;a href=&amp;quot;#prices&amp;quot; class=&amp;quot;button js-open-tab&amp;quot;&amp;gt;Prices&amp;lt;/a&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Now we know to look for any JavaScript touching .js-open-tab, which should
only be a simple search away.&lt;/p&gt;
&lt;p&gt;And hey, now JavaScript and CSS won't share selectors. Since we're separating
our content and presentation, we might as well separate our behaviour all the
way too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="changing-css-html-from-js"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Changing CSS/HTML from JS&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Don't modify the associated CSS properties, but rather modify the CSS class:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
GOOD: $('#element_id').addClass('highlight');
BAD : $('#element_id').css('font-weight': 'bold');
&lt;/pre&gt;
&lt;p&gt;Same story as with CSS, don't modify HTML tag attributes,
but rather try to change the CSS class:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
GOOD: $('#element_id').addClass('sprite red_dot');
BAD : $('#element_id').attr('src': 'some/red_dot.png');
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="test-styleguide"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Test styleguide&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We use &lt;tt class="docutils literal"&gt;expect&lt;/tt&gt; style testing.&lt;/li&gt;
&lt;li&gt;Leave 2 emtpy lines before each &lt;tt class="docutils literal"&gt;suite&lt;/tt&gt; and one empty line before each
&lt;tt class="docutils literal"&gt;test&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;Tests for login controller.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;


&lt;span class="nx"&gt;suite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LoginCtrl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// Shared variables.&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;scope&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ctrl&lt;/span&gt;

    &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Initialize first.&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="nx"&gt;teardown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Clean second.&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;Initializes with no errors and blank values&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;long line are wrapped&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;something&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="nx"&gt;something&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;something&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;


    &lt;span class="nx"&gt;suite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;critical_error attribute&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;

        &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;When set, hides the form and sets the error message.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;manu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeUniqueString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;critical_error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;
            &lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$digest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;show_form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="rerefences"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Rerefences&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Here are the pages I used to create this page.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://toranbillups.com/blog/archive/2013/05/15/Basic-javascript-inheritance-and-polymorphism/"&gt;http://toranbillups.com/blog/archive/2013/05/15/Basic-javascript-inheritance-and-polymorphism/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Library</title><link href="http://styleguide.chevah.com/library.html" rel="alternate"></link><updated>2014-05-08T15:39:34+01:00</updated><author><name>Chevah Team</name></author><id>tag:styleguide.chevah.com,2014-05-08:library.html</id><summary type="html">&lt;p&gt;These page contain a list of talking about life, programming craftsmanship,
good/clean code and many more. The list is in random order:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.amazon.com/Extreme-Programming-Explained-Embrace-Change/dp/0201616416"&gt;Extreme Programming Explained: Embrace Change&lt;/a&gt;
(ISBN: 978-0201616415) by Kent Beck, published in October, 1999.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pragprog.com/the-pragmatic-programmer/"&gt;The Pragmatic Programmer: From Journeyman to Master&lt;/a&gt;
(ISBN: 0-201-61622-X) by Andrew Hunt and David Thomas, published in October, 1999.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882"&gt;Clean Code: A Handbook of Agile Software Craftsmanship&lt;/a&gt;
(ISBN: 978-0132350884) by Robert C. Martin, published in August 11, 2008.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.amazon.com/exec/obidos/ASIN/0321344758/"&gt;Don't Make Me Think: A Common Sense Approach to Web Usability, 2nd Edition&lt;/a&gt;
(ISBN: 978-0321344755) by Steve Krug, published in August 28, 2005.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.amazon.com/exec/obidos/ASIN/0465067107/"&gt;The Design of Everyday Things&lt;/a&gt;
(ISBN: 978-0465067107) by Donald A. Norman, published September 17, 2002.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.amazon.com/Mastering-Regular-Expressions-Jeffrey-Friedl/dp/0596528124/"&gt;Mastering Regular Expressions&lt;/a&gt;
(ISBN: 978-0596528126) by Jeffrey E.F. Friedl, published August 15, 2006.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.amazon.com/dp/1936719118"&gt;Anything You Want&lt;/a&gt;
(ISBN: 978-1936719112) by Derek Sivers, published June 29, 2011.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Overview</title><link href="http://styleguide.chevah.com//index.html" rel="alternate"></link><updated>2014-05-08T15:39:34+01:00</updated><author><name>Chevah Team</name></author><id>tag:styleguide.chevah.com,2014-05-08:/index.html</id><summary type="html">&lt;p&gt;These pages describe the style and other guides used in Chevah project.
They also include some notes about the whole software development
process.&lt;/p&gt;
&lt;p&gt;The content might be pedantic, but we hope that by following these guide
you will find easier to collaborate and improve the quality of
code and work.&lt;/p&gt;
&lt;p&gt;There is a page with common rules and a special page for each language
or technology used by the project.&lt;/p&gt;
&lt;p&gt;Please note that these guides are continuously updated according to latest
best practices.&lt;/p&gt;
&lt;p&gt;We consider that arguments over these guides are not pointless. In the same
time, it is hard to agree upon a style guide for all projects, and we don't
expect that everyone will agree with the lines from this page.
If you have any comment or suggestions, please get in touch with us. You
can do that over email, or adding an issue or pull request on
&lt;a class="reference external" href="{{author.code_url}}"&gt;chevah/styleguide - Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We try to automatically check these rules using &lt;a class="reference external" href="https://launchpad.net/pocket-lint/"&gt;pocket-lint&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is a collection of programming craftsmanship recommendations and ideas.
Please let us know if we fail to properly cite the source.&lt;/p&gt;
</summary></entry><entry><title>Python</title><link href="http://styleguide.chevah.com/python.html" rel="alternate"></link><updated>2014-05-08T15:39:34+01:00</updated><author><name>Chevah Team</name></author><id>tag:styleguide.chevah.com,2014-05-08:python.html</id><summary type="html">&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#general" id="id1"&gt;General&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#mixin" id="id2"&gt;Mixin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#project-specific" id="id3"&gt;Project specific&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#multi-line-indentation" id="id4"&gt;Multi line indentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#imports" id="id5"&gt;Imports&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="general"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;General&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;For python we have pocket-lint that checks for PEP8 and some other things.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.python.org/dev/peps/pep-0008/"&gt;Python PEP 8&lt;/a&gt;
&lt;strong&gt;Python base code style guide&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Favour single inheritance.&lt;/li&gt;
&lt;li&gt;As the second best, use Mixins to reuse code and avoid multiple inheritance.&lt;/li&gt;
&lt;li&gt;Docstring always use multiline strings with double quotes.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Single line docstring.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SomeClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ParentClass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Quick explanation of the role of this class.&lt;/span&gt;

&lt;span class="sd"&gt;    More details to follow in long paragraphs.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Class members or instance members can be documented inline using the
following syntax.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SomeClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ParentClass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Docstring for class.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="c"&gt;#: Docstring for class member.&lt;/span&gt;
    &lt;span class="c"&gt;#: Can be on multiple lines.&lt;/span&gt;
    &lt;span class="n"&gt;class_member&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;All test functions, test methods, test suites will have docstrings.&lt;/li&gt;
&lt;li&gt;Tests methods will be prefixed with &lt;tt class="docutils literal"&gt;test_&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Tests suites (test class) will be prefixed with &lt;tt class="docutils literal"&gt;Test&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Test's docstring should state what is the expected behavior based on
test's input.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_methodName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    When doing this `methodName` will raise an AssertionError.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;When adding linter exception, always add a comment explaining the reason
why the exception was added.&lt;/li&gt;
&lt;li&gt;Use named parameters for calling methods. This will reduce future
refactoring effort.&lt;/li&gt;
&lt;li&gt;If a method or class initialization / constructor method has more than 1
argument always use named parameters for calling that method.&lt;/li&gt;
&lt;li&gt;Try to use single quotes for string. This will make it easier to generated
quoted text for UI or HTML.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;YES&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;other_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;string&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;some_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;string &amp;quot;b&amp;quot; yes&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;NO&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;other_bad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;some_bad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;string &amp;#39;b&amp;#39; yes&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;As PEP8 recommend, Don't use '' to split long lines. Wrap long lines is by
using Python's implied line continuation inside parentheses, brackets and
braces. More details here:
&lt;a class="reference external" href="http://www.python.org/dev/peps/pep-0008/#maximum-line-length"&gt;http://www.python.org/dev/peps/pep-0008/#maximum-line-length&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Multi line split using parentheses, brackets (etc) will follow the normal
indentation. The code might look ugly and then exceptions are allowed.&lt;/li&gt;
&lt;li&gt;Define all class members at the beginning of class definition.
Don't interleave methods and class members definition. This should make it
easy to identify all class members used by the class.&lt;/li&gt;
&lt;li&gt;Define all instance members inside the __init__() method. This should make
it easy to identity all instance members used by the class and reduce the
risk of using the same member for more than one purpose.&lt;/li&gt;
&lt;li&gt;Decode all input to Unicode and encode all output from Unicode. Do &lt;strong&gt;all&lt;/strong&gt;
internal text handling in &lt;strong&gt;Unicode&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;input_raw_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read_from_wire&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;input_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;input_raw_string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Only work with Unicode data.&lt;/span&gt;
&lt;span class="n"&gt;output_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;process_something&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;output_raw_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;output_string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;send_to_wire&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_raw_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;UTF-8 is not Unicode.
Unicode is a character set and UTF-8 is a particular way of
encoding Unicode.&lt;/li&gt;
&lt;li&gt;When a method does not use the &lt;em&gt;self&lt;/em&gt; attribute, this is a code smell
that this method should be placed somewhere else.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="mixin"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Mixin&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As stated by &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Mixin"&gt;Wikipedia&lt;/a&gt;:
Mixins encourage code reuse and avoid well-known pathologies associated
with multiple inheritance.&lt;/p&gt;
&lt;p&gt;Mixin is a limited usage of multiple inheritance.&lt;/p&gt;
&lt;p&gt;We use mixing to reuse code and they are provide great help writing tests.&lt;/p&gt;
&lt;p&gt;Methods from a mixin should not be overwritten by classes using the mixin.&lt;/p&gt;
&lt;p&gt;Mixins should not overwrite methods or call &lt;strong&gt;super()&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;When defining a class using mixins, put first the parent class and then
mixin classes in alphabetical order.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SomeMixedClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ParentClass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AnotherMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SomeMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ZoroMixin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    A class with `single` inheritance and multiple mixins.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When defining a mixin, document the external class or instance members used
by the mixin.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;some_package&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;complicated_code_using&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;complicated_other_using&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LoginMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Does some kind of work.&lt;/span&gt;

&lt;span class="sd"&gt;    username - account used for authentication.&lt;/span&gt;
&lt;span class="sd"&gt;    password - password for the account&lt;/span&gt;
&lt;span class="sd"&gt;    ssh_key - SSH key for authentication&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;loginWithUsernameAndPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Does something.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;SomeException&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;complicated_code_using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;loginWithUsernameAndSSHKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Does something else.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;complicated_other_using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ssh_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="project-specific"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Project specific&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;When default arguments have mutable values they are defined as &lt;cite&gt;None&lt;/cite&gt; and
then assigned the default value.&lt;/p&gt;
&lt;p&gt;Otherwise this can hit us very hard. &lt;a class="reference external" href="http://stackoverflow.com/q/1132941/539264"&gt;More details here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;methodName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;imutable&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Describe method.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SomeObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="multi-line-indentation"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id4"&gt;Multi line indentation&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;For now, just some examples:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;message_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getUniqueString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;do_something_else&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Same indentation applies for brackets:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;some_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;bla&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;blabla&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;alabala&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;2 line code exception. If the parentheses expression fits on one line:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getUniqueString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Conditional exception. When indenting parentheses for conditional
expressions add one extra indent to separate the condition expression
from the conditional block.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;somethin_else&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt;
        &lt;span class="n"&gt;say_something_else&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;do_else&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nothing&lt;/span&gt;
    &lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;somethin_else&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt;
        &lt;span class="n"&gt;say_something_else&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt;
        &lt;span class="n"&gt;we_should_not_have_long_conditionals&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;do_else&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nothing&lt;/span&gt;
    &lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Class, method and function indentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClassName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;VeryLongParentClass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;VeryLongOtherMixin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Docstring here.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;myMethodWithLongArguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other_long_thing&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Docstring here.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_function_with_long_arguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;other_long_thing&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;other_very_long_argument&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Docstring here.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="imports"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Imports&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Imports should be called at the start of each module, the only exception is
allowed for avoiding circular imports.&lt;/li&gt;
&lt;li&gt;There is one empty line between the import block and module comment.&lt;/li&gt;
&lt;li&gt;The imports blocks are separated by one empty line.&lt;/li&gt;
&lt;li&gt;They will be arranged in 3 major blocks:&lt;ul&gt;
&lt;li&gt;The first one is for importing from Python standard modules.&lt;/li&gt;
&lt;li&gt;The second from modules outside of the project (3rd party).&lt;/li&gt;
&lt;li&gt;The last for modules belonging to the project.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In each block the modules are sorted in alphabetical order,
case-insensitive.&lt;/li&gt;
&lt;li&gt;When importing multiple members of a module, if they don't exceed the 78
characters limit, they will be listed on the same line&lt;/li&gt;
&lt;li&gt;When importing multiple members of a module, and they exceed the 78
characters limit, they will be listed as a list, with each member on a
line ending with comma.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A good example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Copyright (c) YEAR Your Name.&lt;/span&gt;
&lt;span class="c"&gt;# See LICENSE for details.&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Sample module for demonstrating imports coding conventions.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;with_statement&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;optparse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OptionParser&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;types&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;OpenSSL&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;crypto&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twisted.web&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;simplejson&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;chevah.commons.utils.constants&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;DEFAULT_KEY_SIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;DEFAULT_KEY_TYPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;DEFAULT_PUBLIC_KEY_EXTENSION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;chevah.commons.utils.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OperationalException&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;chevah.commons.utils.crypto&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Key&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;chevah.commons.utils.helpers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;log_add_default_handlers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;open_local_admin_webpage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;chevah.server.commons.configuration&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;ApplicationConfiguration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;chevah.server.commons.constants&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;CONFIGURATION_SERVER_FILE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;CONFIGURATION_PID_FILE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;PRODUCT_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;chevah.server.commons.process&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ChevahTwistedProcess&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>References</title><link href="http://styleguide.chevah.com/references.html" rel="alternate"></link><updated>2014-05-08T15:39:34+01:00</updated><author><name>Chevah Team</name></author><id>tag:styleguide.chevah.com,2014-05-08:references.html</id><summary type="html">&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#general" id="id1"&gt;General&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#python" id="id2"&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#javascript" id="id3"&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#css" id="id4"&gt;CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;These page contain a list of sources used for creating this content.&lt;/p&gt;
&lt;div class="section" id="general"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;General&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://agilo.agilofortrac.com/wiki/agilo/dev/SmallCommits"&gt;Agilo small commits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://dev.launchpad.net/"&gt;Launchpad Style Guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://sscce.org"&gt;Short, Self Contained, Correct (Compilable), Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/styleguide"&gt;GitHub Styleguide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.ibm.com/developerworks/rational/library/11-proven-practices-for-peer-review"&gt;11 practices for better code review&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="python"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Python&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.python.org/dev/peps/pep-0008"&gt;PEP8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="javascript"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;JavaScript&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/rwldrn/idiomatic.js"&gt;Idiomatic JS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://ozmm.org/posts/slightly_obtrusive_javascript.html"&gt;Slightly obtrusive javascript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="css"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;CSS&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.phpied.com/css-coding-conventions/"&gt;Stoyan's CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/necolas/idiomatic-css"&gt;Idiomatic CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Review</title><link href="http://styleguide.chevah.com/review.html" rel="alternate"></link><updated>2014-05-08T15:39:34+01:00</updated><author><name>Chevah Team</name></author><id>tag:styleguide.chevah.com,2014-05-08:review.html</id><summary type="html">&lt;p&gt;This page discuss the code/changes review process as both the person
who requests a reviewer and a person who checks a review.&lt;/p&gt;
&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#general" id="id1"&gt;General&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#for-person-requesting-a-review" id="id2"&gt;For person requesting a review&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#review-request-message" id="id3"&gt;Review request message&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#merge-your-branch" id="id4"&gt;Merge your branch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#for-person-reviewing-changes" id="id5"&gt;For person reviewing changes&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#reviewer-s-check-list" id="id6"&gt;Reviewer's check list&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="general"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;General&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The goal of a review is to eliminate as many defects as possible,
regardless of who &amp;quot;caused&amp;quot; the error. Branch driver and reviews work
together to achieve this goal.&lt;/li&gt;
&lt;li&gt;The review process is a very efficient form of pair-programming ...
&lt;a class="reference external" href="http://whenarewehavingcake.tumblr.com/post/23507389861"&gt;and is not this kind of pair programming&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Branch driver is the person (or persons) requesting the review and
responsible for implementing changes during review.&lt;/li&gt;
&lt;li&gt;Reviewer is the person responsible for checking the code or changes.&lt;/li&gt;
&lt;li&gt;The review process is first class citizen of the Quality Assurance process.&lt;/li&gt;
&lt;li&gt;Each defect found during a review is an opportunity to improve the code.
Every defect found and fixed in peer review is a defect that a customer
never sees and another problem that support doesn't have to spend time
tracking down.&lt;/li&gt;
&lt;li&gt;The branch driver is responsible for getting his/her branch approved. In
case a branch review is delayed, the branch driver should contact the
reviewers and urge the review.&lt;/li&gt;
&lt;li&gt;While the main purpose of a review is to assert the quality of the changes,
the review is at the same time a learning, growing, and communication
experience.&lt;/li&gt;
&lt;li&gt;Try to observe good things from other team members and feel free to comment
and let others know about how you think that things can be improved.&lt;/li&gt;
&lt;li&gt;Ideally you will have many small merge requests, because the bigger they
get, the more costly they are - now and in the future.&lt;/li&gt;
&lt;li&gt;One merge request should do one thing only.&lt;/li&gt;
&lt;li&gt;The target for a small request is no more than 400 touched lines
(added + removed).&lt;/li&gt;
&lt;li&gt;When you do a refactoring and you need to rename something in many files,
do it in a dedicated branch which only deals with the renaming.
This will help a lot with the review. Land your changed with the ugly
names and then do a follow-up branch for the renaming.&lt;/li&gt;
&lt;li&gt;Feel free to submit as many merge request as you can. There is a problem
with the size of a merge request, not with their number :).&lt;/li&gt;
&lt;li&gt;Some reasons for keeping the merge requests small:&lt;ul&gt;
&lt;li&gt;Large changes are much more likely to do many things.&lt;/li&gt;
&lt;li&gt;It's harder to understand them.&lt;/li&gt;
&lt;li&gt;It's harder to review them.&lt;/li&gt;
&lt;li&gt;It's harder to inspect the main branch to find the merge that
introduced a bug.&lt;/li&gt;
&lt;li&gt;It's more likely to break the build.&lt;/li&gt;
&lt;li&gt;It's harder to cherry pick code for backporting / supporting old releases.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="for-person-requesting-a-review"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;For person requesting a review&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Once a task/ticket is done, it should be submitted for review.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;All&lt;/strong&gt; changes should be reviewed prior to be merged or released.&lt;/li&gt;
&lt;li&gt;Before requesting a review you should run a full test on your local
computer and on all supported platforms.
Just run &lt;tt class="docutils literal"&gt;paver test_remote all&lt;/tt&gt; and Buildbot and GitHub will work
together to display the results.&lt;/li&gt;
&lt;li&gt;Before passing the review to others, take another careful look at your work
and perform a first review yourself.
Check that all changes are described together with their attached test
cases.
It is very important to have a good review request message as it will
help reviewers understand what you have done.&lt;/li&gt;
&lt;li&gt;Check the &lt;strong&gt;Reviewer's check list&lt;/strong&gt; since those are the things that a
reviewer will check for sure.&lt;/li&gt;
&lt;li&gt;For Trac: A review request is created by adding the comment and then
setting the state to 'needs_review'.
(&lt;strong&gt;don't use keywords&lt;/strong&gt;, we are using a strict ticket
work-flow so use the ticket action form).&lt;/li&gt;
&lt;li&gt;For GitHub: A review request is created using &lt;strong&gt;GitHub Pull requests&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;When submitting a review for changes not planed in the current milestone,
update the milestone to the current one. Don't leave the old milestone.&lt;/li&gt;
&lt;li&gt;You can start writing your review request as soon as you start coding on a
branch. There is no need to wait for feature to be fully implemented and
tests to pass.
Writing a review request early, will help you to organize and explain
the work that you plan to do on the branch.&lt;/li&gt;
&lt;li&gt;When the review is ready to be sent to reviewers, leave a comment
containing the &lt;strong&gt;needs-review&lt;/strong&gt; marker word. It will trigger the review
request process.&lt;/li&gt;
&lt;li&gt;GitHub inline comments are great, and you can add them to help with the
initial review request. Just &lt;strong&gt;don't abuse them&lt;/strong&gt;!
Think twice before adding an initial inline comment for the review.
Ask yourself why that comments is needed and why that line is not
clear. Maybe adding a comment in the code would avoid the
need for the GitHub inline comment.&lt;/li&gt;
&lt;li&gt;During a review, the reviewer might request changes. You can solve
the request by either changing the code, or adding a comment with
the reason why you don't want to change the code. After all requests
are solved, leave a &lt;strong&gt;new&lt;/strong&gt;, separate, comment containing the keyword
&lt;strong&gt;needs-review&lt;/strong&gt; . This will let reviewers know that you are done and that
they can check the latest changes.&lt;/li&gt;
&lt;li&gt;Make sure that review request message is always up to date with latest
changes.
If during the review new changes are made or new test cases are discovered,
don't forget to update the initial review request message to include a
summary of these changes.&lt;/li&gt;
&lt;li&gt;The &amp;quot;How to test the changes&amp;quot; section should include &lt;strong&gt;ALL&lt;/strong&gt; test cases
done during the review. If a reviewer is following a test case not described
in the initial request message, it should update the review message with
the new test case.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="review-request-message"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id3"&gt;Review request message&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When submitting a ticket for review, the review request should contain the
following message (added to the ticket description):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{{ '{{{' }}
#!rst

Problem description
===================

Describe the problem that these changes wants to solve.
This content should be created when a ticket is submitted and just link
the ticket or copy paste the ticket description... or find a way for
linking this review to a ticket.

depends-on #123 #124


Why we got into this (5 whys)
=============================

Mainly used for bugs. Can be removed for tasks or new features.

Describe why we got this problem in the first place. What went wrong.
Repeatedly ask the question “Why” (up to 5 times) to determine the
cause of this problem.


Changes description
===================

Describe how the problem was fixed.
List **all** changes made.

List all changes for which an *ideal* solution was not found. Describe
the current solution.

What was not done yet and link to the ticket for the still to do work.


How to try and test the changes
===============================

reviewers &amp;#64;some-dude &amp;#64;another-dude

How the changes can be tested and verified by team members.


Title for first test case
-------------------------

For end-user changes, how the changes can be tested and verified by
our users.

List the steps to follow for checking that everything is OK.

Explicitly state the expected results.
{{ '}}}' }}
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;For GitHub review requests, &lt;strong&gt;add the merge commit message as the pull
request title&lt;/strong&gt;. The message should include the ticket ID number.
Example of merge commit message:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[#1234] What was done in this branch.
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The commit message should be on a single line and preferable under 100
characters. The message should be a clearly articulated phrase, summarizing
changes done in the branch. Further details about the changes can go in
the release notes or review request body.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Add the list of persons who should review the branch, using a
line starting with &lt;strong&gt;reviewers&lt;/strong&gt; and followed by GitHub names or each
reviewer prefixed with &lt;strong&gt;&amp;#64;&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;If required, using &lt;strong&gt;depends-on&lt;/strong&gt; marker, add the list of reviews on which
this review depends and blocks the merge of this branch.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="merge-your-branch"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id4"&gt;Merge your branch&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After the merge request and review was approved you need to merge your branch
into master.&lt;/p&gt;
&lt;p&gt;After your review request was approved, you can send you branch got PQM
for automatic testing and merging. Use the following command:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
paver pqm GITHUB_PULL_REQUEST_ID
&lt;/pre&gt;
&lt;p&gt;The PQM will check your branch and if it passed all tests, it will be merged
and pushed to master.&lt;/p&gt;
&lt;p&gt;If PQM is not enabled for the repo, you will need to do a manual merge.&lt;/p&gt;
&lt;p&gt;When doing manual merge using git, use squash merge and don't use the
default commit message. Here is a sample command for merging branch
&amp;quot;1234-what-was-done&amp;quot;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git checkout master
git merge --no-commit --squash 1234-what-was-done
git commit -a -m &amp;quot;[#1234] What was done in this branch.&amp;quot;
&lt;/pre&gt;
&lt;p&gt;It is recommended to define a git alias for &lt;cite&gt;merge --no-commit --squash&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;A merge commit should have a commit message, in the format:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[#1234] What was done in this branch.
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;#1234&lt;/strong&gt; is the ticket number for this branch. It is used to get more
details about branch work and review. It can also be used to associate a
commit to a ticket / branch / review / task and check the history/story of
that commit.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="for-person-reviewing-changes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;For person reviewing changes&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Aim for a code inspection rate of fewer than 300 – 500 LOC per hour. This
does not apply to QA team members for which, reviewing changes is the main
activity.&lt;/li&gt;
&lt;li&gt;Take enough time for a proper, slow review, but not more than 60–90 minutes.
Take a big break between reviews.&lt;/li&gt;
&lt;li&gt;You should always spend at least five minutes reviewing code, even if it's
just one line. Often, a single line or small changes can have major
impact throughout the whole system, and it's worth the five minutes to
think through the possible effects that a change could have.&lt;/li&gt;
&lt;li&gt;The only quality metric of good work / code is &lt;strong&gt;WTF/s&lt;/strong&gt;. While doing
the review you are encouraged to keep track of all your first
contact / view / read impressions and report them in the review feedback.&lt;/li&gt;
&lt;li&gt;Follow procedure recommended in the &amp;quot;How to try and test the changes&amp;quot;
section, record environment, steps and results and share them through
a comment.&lt;/li&gt;
&lt;li&gt;In case of errors, leave a comment describing what tests were run, the
exact steps you took and the actual results.&lt;/li&gt;
&lt;li&gt;If the work is good, you can request the code to be merged by the author
by setting the state to needs_merge in Trac.&lt;/li&gt;
&lt;li&gt;If the work is good and GitHub pull request was used, leave a comment on
the pull request page with a line starting with &lt;strong&gt;approved-at 342d345&lt;/strong&gt;,
where &lt;strong&gt;342d345&lt;/strong&gt; is the revision at which the branch was approved.&lt;/li&gt;
&lt;li&gt;If no merge is required you can close the ticket as solved.&lt;/li&gt;
&lt;li&gt;If minor changes are required, and they are easy to fix, you cat try to fix
them. Commit the changes and approve the review at your revision.&lt;/li&gt;
&lt;li&gt;If changes are required, you put the ticket in the &lt;strong&gt;needs-changes&lt;/strong&gt; state
and assign the ticket to the person who can make the required changes.
When working with GitHub you can request changed by adding
the &lt;strong&gt;needs-changes&lt;/strong&gt; marker word in a comment.&lt;/li&gt;
&lt;li&gt;Don't spend to much time on a review request if it is not clear enough and
you don't know exactly what to do and how to test.
This is a problem with the review request and it &lt;cite&gt;needs changes&lt;/cite&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="reviewer-s-check-list"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;Reviewer's check list&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Does the &lt;strong&gt;new&lt;/strong&gt; changes comply with latest styleguide ?&lt;/li&gt;
&lt;li&gt;Does the code have tests for new code?&lt;/li&gt;
&lt;li&gt;Does the merge commit message describes what is done by this branch?&lt;/li&gt;
&lt;li&gt;Does the branch name starts with the Trac ticket ID.&lt;/li&gt;
&lt;li&gt;Does &lt;strong&gt;all&lt;/strong&gt; tests pass? Does GitHub say that the branch is
&lt;strong&gt;Good to merge&lt;/strong&gt;?&lt;/li&gt;
&lt;li&gt;If there is no &lt;tt class="docutils literal"&gt;paver test_remote all&lt;/tt&gt; for the latest code, you can
either just reject the review, or trigger a test and wait for results.
&lt;strong&gt;Never&lt;/strong&gt; approve a code that is not passing the tests.&lt;/li&gt;
&lt;li&gt;Is there a release notes entry for changes?&lt;/li&gt;
&lt;li&gt;Is there documentation for changes? Does the documentation make sense?&lt;/li&gt;
&lt;li&gt;Are the new event documented?&lt;/li&gt;
&lt;li&gt;Are the removed events documented?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Testing</title><link href="http://styleguide.chevah.com/testing.html" rel="alternate"></link><updated>2014-05-08T15:39:34+01:00</updated><author><name>Chevah Team</name></author><id>tag:styleguide.chevah.com,2014-05-08:testing.html</id><summary type="html">&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#types-of-tests" id="id1"&gt;Types of tests&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#unit-testing" id="id2"&gt;Unit testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#integration-testing" id="id3"&gt;Integration testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#system-testing" id="id4"&gt;System testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#story-functional-customer-tests" id="id5"&gt;Story / Functional / Customer tests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#developing-using-tests" id="id6"&gt;Developing using tests&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#domain-specific-language" id="id7"&gt;Domain Specific Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#dependency-injection-of-system-components" id="id8"&gt;Dependency injection of system components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#mock-object" id="id9"&gt;Mock object&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#structure-of-a-test" id="id10"&gt;Structure of a test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#smells" id="id11"&gt;Smells&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#naming-conventions" id="id12"&gt;Naming conventions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#test-fixtures-setup-and-teardown" id="id13"&gt;Test fixtures, setUp and tearDown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#tests-description-docstrings" id="id14"&gt;Tests description - docstrings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#rerefences" id="id15"&gt;Rerefences&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Writing automated tests is an important part of development.&lt;/p&gt;
&lt;p&gt;We write tests to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;help improve quality&lt;/li&gt;
&lt;li&gt;help understand the product and its components&lt;/li&gt;
&lt;li&gt;reduce risk and fears when doing bold changes into product structure&lt;/li&gt;
&lt;li&gt;make work easier and fun&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All tests should have the following characteristic:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;simple&lt;/li&gt;
&lt;li&gt;easy to write and maintain as product evolves&lt;/li&gt;
&lt;li&gt;easy to read and understand what they are doing&lt;/li&gt;
&lt;li&gt;easy to run, easy to re-run, fully automated run and reporting&lt;/li&gt;
&lt;li&gt;run very, very fast&lt;/li&gt;
&lt;li&gt;each test should be an independent test which can run by itself&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Writing tests is not only done to check that code works as expected, it is
also done to make sure that code has a simple designed, decoupled and easy
to be reused.&lt;/p&gt;
&lt;p&gt;Writing test is also about making sure that you fully understand what the
code should do and how it is used.&lt;/p&gt;
&lt;p&gt;Writing tests is not a silver bullet for improving code quality and is easy to
write bad tests.&lt;/p&gt;
&lt;p&gt;Once used to having tests that show how things work (and that they do work), you
will start using the key phrase: &lt;strong&gt;Do you have a test for that?&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You are going to test your code anyway, spend the time to do it right.&lt;/p&gt;
&lt;p&gt;We write tests as a tool for regression checking, ie preventing bugs.
Tests should be easy to run and should be fast. Tests will also help us find
bugs and avoid long debugging session, but they primary goal is to keep the
bugs out of our product.&lt;/p&gt;
&lt;p&gt;We should write code and do clean-up / refactoring without any fear and with
a confident and free mind. Don't take decision out of fear.&lt;/p&gt;
&lt;p&gt;Imperfect tests, run frequently, are much better than perfect tests that are
never written at all.&lt;/p&gt;
&lt;p&gt;Writing tests does not mean writing twice as much code or coding slower.&lt;/p&gt;
&lt;p&gt;Most of the time the associated test code is tree times longer, or more
in lines of code. Test code should be trivial, easy to write and easy to
understand. Even if there are many lines of test, they should be easy
to write and should not add a big overhead to what you're doing.&lt;/p&gt;
&lt;p&gt;On the long run, it's faster and more robust than coding without tests.&lt;/p&gt;
&lt;p&gt;Another important part of writing test is to help us have a clean code base.
You can not refactor and do clean-up without an easy mechanism to check for
regression.
Clean-up tasks are just normal business and an integrated part of
coding process. We will do cleanup all the time, and there is no
dedicated development window for cleanup.&lt;/p&gt;
&lt;p&gt;The goal is to write test first and code later.&lt;/p&gt;
&lt;p&gt;If you are starting and learning how to write tests, you will write tests
after writing the code simply because you have so much to learn and find
that writing tests first is impossible. This is a normal start.
It's just a stepping stone on your way to test-first development.&lt;/p&gt;
&lt;p&gt;Passing software to another developer without tests is like saying
'Good luck dude!', but instead we should say 'I've got you covered!'.&lt;/p&gt;
&lt;div class="section" id="types-of-tests"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Types of tests&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Tests can be placed in many categories according to various criteria.&lt;/p&gt;
&lt;p&gt;Below is an attempt to identify various types of tests based on their interaction
with other code / systems.&lt;/p&gt;
&lt;div class="section" id="unit-testing"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id2"&gt;Unit testing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is the least controversial type of tests, and people usually know what
unit tests are.&lt;/p&gt;
&lt;p&gt;Test for single method or functions. As the number of unit tests significantly grows
throughout the lifecycle of the project one key requirement is that they run as
fast as possible. Therefore the tests should use only data from memory for both input
and output.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="integration-testing"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id3"&gt;Integration testing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;These are the tests which take what was tested using unit tests (functions,
methods) and combine / integrate them in bigger tests for the whole module or even
module interactions.&lt;/p&gt;
&lt;p&gt;The time / speed restrictions still apply. They should also use only data from memory.&lt;/p&gt;
&lt;p&gt;Try to test all corner cases regarding the component's integration.&lt;/p&gt;
&lt;p&gt;Don't write corner cases for a specific component since they &lt;em&gt;should&lt;/em&gt; be handled at
unit testing level. If that is not the case please revise the unit tests accordingly.&lt;/p&gt;
&lt;p&gt;The purpose of integration testing is to detect any inconsistencies between
the software units / modules that are integrated together or between any
modules and the hardware.&lt;/p&gt;
&lt;p&gt;Since they should be fast, you can put them together with unit tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="system-testing"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id4"&gt;System testing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In contrast with unit or functional tests, we have system test which have no
restriction for
interacting with external systems.&lt;/p&gt;
&lt;p&gt;A test is a system test if:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It touches the file system.&lt;/li&gt;
&lt;li&gt;It talks to the database.&lt;/li&gt;
&lt;li&gt;It communicates across the network.&lt;/li&gt;
&lt;li&gt;It uses some type of shared resource and can't run at the same time as
any other unit tests.&lt;/li&gt;
&lt;li&gt;You have to do special things to prepare your environment.&lt;/li&gt;
&lt;li&gt;Requires a special OS account / OS credentials to exists.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;They interact with local filesystem, network and other services provided by
the operating system.&lt;/p&gt;
&lt;p&gt;While interacting with external system, system tests require additional
steps in configuration and preparing the external system for running the
tests, so their execution depend on these external systems.
Example: configure an OS account, do special network configuration,
configure a printer, create certain files or folder structures on the
filesystem.&lt;/p&gt;
&lt;p&gt;The external services are &amp;quot;black boxes&amp;quot;, as we don't have access to their
internal structure.&lt;/p&gt;
&lt;p&gt;They test the integration with external services, and at some
extend they are integration tests.&lt;/p&gt;
&lt;p&gt;Due to interaction with external system, system tests are slower than unit or
integration tests.&lt;/p&gt;
&lt;p&gt;While configuring external systems, take special care to avoid side effects or
leaving the system in an inconsistent tests that will not allow other tests
to execute. At the end of the test, leave the system in the same state as the
one from the start.&lt;/p&gt;
&lt;p&gt;We put them in together with unit tests, since they should be fast,
but we tag them since they require special handling due to dependency on
external systems. Ex, when porting on a new platform, they are likely to
fail.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="story-functional-customer-tests"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Story / Functional / Customer tests&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;These are the tests for the final product. All modules are put together just
like in the production (real) system.&lt;/p&gt;
&lt;p&gt;In other places, they are also called &lt;em&gt;acceptance tests&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This kind of tests help us detect &lt;strong&gt;what&lt;/strong&gt; features of our product are
not working. In case we have good unit test, we look there to find &lt;strong&gt;why&lt;/strong&gt;
a functional tests is failing.&lt;/p&gt;
&lt;p&gt;Functional tests will not help with development and locating the source
of an error. Use unit tests for this. In case unit test pass, and we have
failing functional tests, then we have just discovered a hole in our unit
testing and we should fix it first.&lt;/p&gt;
&lt;p&gt;The functional tests are just recording the same steps required in manual
testing. If a functional tests pass, you can look around by starting
the real server and manually perform the same steps as in the functional
test.&lt;/p&gt;
&lt;p&gt;You can consider them black box testing as their role is to check that the
system, as a whole, works.&lt;/p&gt;
&lt;p&gt;While for system tests only external systems are handled as black boxes,
for functional testing the system under test is also handled as a black box.&lt;/p&gt;
&lt;p&gt;They will read actual input just like the real life application and will
produce actual, real life, results.&lt;/p&gt;
&lt;p&gt;Don't do too much work here and don't bother with corner cases.
A simple success scenario and a failure scenario should be enough.&lt;/p&gt;
&lt;p&gt;Sometimes reading and writing actual input can slow tests, so for performance
reasons, some system tests also read and write data in memory, but the format
used closely resembles the one used in real life, production environments.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="developing-using-tests"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Developing using tests&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As there is no guarantee for the order in which the tests will execute there is
one major requirement, regardless of the test type. The &lt;em&gt;test should not have any
side effect&lt;/em&gt; as the order of execution is random.&lt;/p&gt;
&lt;p&gt;When writing application code, only write enough code to make a test work.
It helps you to realise when to stop coding and move on to the next task.
If you know there should be more code to handle other cases, you should write the tests
for those particular cases. This technique prevents writing code that is never executed
and ensures that you always have a test for the code you write.&lt;/p&gt;
&lt;p&gt;When you find a bug, start by writing a test reproducing the bug then
continue you work in fixing the bug. Ask the &lt;em&gt;5 whys&lt;/em&gt; in order to find the
root cause of the bug and fix the problem there. The initial test written
to reproduce the bug, might be a high level tests which is not at the same
level to the code which was fixed. Removed the high level tests and write
a specific unit test, directly associated with the fixed code.&lt;/p&gt;
&lt;p&gt;Running the test suite should be fast, but sometimes some tests are just slow.
Functional tests are always slow, and system tests tend to be slow. We mark
these slow tests so that we can skip them using the test runner.&lt;/p&gt;
&lt;p&gt;Principle of developing using tests:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Write test first&lt;/strong&gt; - the test will save a lot of debugging time and
setup time for each time you would have to run the manual test to check
your code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Design for testability&lt;/strong&gt; - Now, if you don't write your test first, you
should at least let the test design your code and not design the test
after your code. If you &lt;strong&gt;write test first&lt;/strong&gt; you don't need to worry
about this.&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;Front Door First&lt;/strong&gt;, this means that you should first try to write
tests only using the public interface.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Verify one condition per test&lt;/strong&gt;. Don't test more than one thing in a test,
as it will make the test hard to read. There is an exception for customer
tests, which are story based and those tests will check a complete
work-flow.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Comunicate Intent&lt;/strong&gt; write short tests, which are clean and easy to read
and serve as documentation for the code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Keep testing login out of production code&lt;/strong&gt;. Don't add hooks or
conditional statements in the production code to help with testing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Keep tests independent&lt;/strong&gt; each test should run on it's own and should also
run together with the other tests.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="domain-specific-language"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Domain Specific Language&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Group multiple / related calls into dedicated, helper methods. Give the method
an easy to read name. Try to create a Domain Specific Language for your tests.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestSuperUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Tests for super user.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_rename_ulgy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Users can be renamed just by calling rename() on the user object.&lt;/span&gt;

&lt;span class="sd"&gt;        Ugly initialization code.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makeUsername&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;new_username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makeUsername&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;configuration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makeSuperConfiguration&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;userExists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_username&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;userExists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;makeUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Return a new username created for `configuration`.&lt;/span&gt;

&lt;span class="sd"&gt;        If `configuration` is `None` it will use a new configuration.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;configuration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makeSuperConfiguration&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_rename_clean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Users can be renamed just by calling rename() on the user object.&lt;/span&gt;

&lt;span class="sd"&gt;        Clean version.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makeUsername&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;new_username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makeUsername&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makeUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;userExists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_username&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;userExists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="dependency-injection-of-system-components"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;Dependency injection of system components&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For unit testing, we want to make them easy to write, run them fast and
without touching the system (filesystem / network / os services).&lt;/p&gt;
&lt;p&gt;In order to be useful, methods need to interact with the system.&lt;/p&gt;
&lt;p&gt;As a first practice, methods interacting with the system should be grouped
and isolated into component dedicated with input / output operations.&lt;/p&gt;
&lt;p&gt;When writing tests for code which touches the system, the tests will also
use the system. This can slow the tests or create unwanted side effects, since
most of the time system resources are persistent.&lt;/p&gt;
&lt;p&gt;In some cases, especially when testing code for failures, it is very hard
to setup the external system to raise a certain failure condition. For example
we have the code which handles a socket which can raise a timeout error.
Timeout errors are complicated since they requite a certain amount of time
to pass before they appear and this can slow down the whole tests.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ClientWithoutDependecy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    A network client.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Try to connect to a server and return False if connection was&lt;/span&gt;
&lt;span class="sd"&gt;        not successful.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TimeoutError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;do_something_on_timeout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_connect_with_slow_timeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    When a server does not exist at the address, the timeout is handled&lt;/span&gt;
&lt;span class="sd"&gt;    in some way.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ClientWithoutDependecy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect_to_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;bad.address&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# Wait a lot for method to return.&lt;/span&gt;

    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ClientWithDependecy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    A network client which has its dependencies as class members.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Try to connect to a server and return False if connection was&lt;/span&gt;
&lt;span class="sd"&gt;        not successful.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TimeoutError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;do_something_on_timeout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_connect_with_fast_timeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    When a server does not exist at the address, the timeout is handled&lt;/span&gt;
&lt;span class="sd"&gt;    in some way.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TimingOutSocket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        A socket which times out at connection.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TimeoutError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ClientWithDependecy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TimingOutSocket&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connect_to_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;bad.address&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# Returns very fast.&lt;/span&gt;

    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="mock-object"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;Mock object&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Mock object can simplify a lot test writing and are a very powerful test
tool.&lt;/p&gt;
&lt;p&gt;With great power, comes great responsibility! Don't abuse the mocks.&lt;/p&gt;
&lt;p&gt;As much as possible, try to use a Mock object together with the specification
of the mocked class.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Bad.&lt;/span&gt;
&lt;span class="n"&gt;mocked_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;# Good.&lt;/span&gt;
&lt;span class="n"&gt;mocked_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;specs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SomeClass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can use mock object in the following circumstances:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Want to trigger an error from a function that requires a precondition
that is hard to create in a test.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;some_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SomeClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;some_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;openFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SomeHardException&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Want to check for delegation and you know that the delegated methods /
objects have good test coverage.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="structure-of-a-test"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Structure of a test&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Use the &lt;strong&gt;Assert, Act, Arrange,&lt;/strong&gt; pattern: each part must have it's own paragraph.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Arrange&lt;/strong&gt; is variable declaration and initialization code.
Set up all conditions and environment for testing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Act&lt;/strong&gt; is invoking the code being tested.
Call the method or trigger the necessary state.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Assert&lt;/strong&gt; is using the assert methods or any other code to verify that
expectations were met.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;For integration tests, this can also be called &lt;strong&gt;Assemble, Activate, Assert&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The tests needs to be short and easy to read.&lt;/p&gt;
&lt;p&gt;Some test might not require the &lt;em&gt;arrange&lt;/em&gt; part, but this is usually a code
smell and most of the time you should have something in arrange part.&lt;/p&gt;
&lt;p&gt;Make sure to test only a single thing at once.&lt;/p&gt;
&lt;p&gt;When &lt;em&gt;asserting&lt;/em&gt; that &lt;em&gt;acting&lt;/em&gt; on a code raised an exception, these two steps
might get intertwined and look like the following code. This is OK.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_getAllProperties_no_accounts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    An error is raised if no accounts are defined.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ConfigurationError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;some&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getAllProperties&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;em&gt;arrange&lt;/em&gt; part can get very long. Try to move as much code in setUp()
method, or move related initialization code in a helper method.&lt;/p&gt;
&lt;p&gt;When the code is used only in a few tests, put it in a dedicated, reusable, method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_section_navigation_long_arrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    This does not uses setUp or other&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makeTestAccount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makeTestBrowser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BASE_URL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/login&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clickButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Submit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BASE_URL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/some_section&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;section_title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Object used by almost all tests.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makeTestAccount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makeTestBrowser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Go to login page and submit username and password.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BASE_URL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/login&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clickButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Submit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_section_navigation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    After login, users can navigate to specific sections.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BASE_URL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/some_section&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;section_title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Especially on some integration test or system tests, you also have one last
part for a test: the cleanup. It is recommended to do it in tearDown() but
when not practical, do it as a new paragraph, at the end of the test.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="smells"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Smells&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Don't abuse the debugger. The tests should have a good coverage so that
any code can be debugged just by using the debugger on a failed tests.
In case you need more than 1 breakpoint in the code, this is a sign that
you are missing a test.&lt;/li&gt;
&lt;li&gt;Hard work in finding / debugging an error is often an indication of failure
in writing good code or good tests.&lt;/li&gt;
&lt;li&gt;In case using the automatic breakpoint provided test runner is enough to
detect the problem, that the code might be good :)&lt;/li&gt;
&lt;li&gt;If a functional test fails, but no unit test fails, than we have at least
one missing unit test.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="naming-conventions"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;Naming conventions&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;All test cases should have names prefixed with &lt;cite&gt;Test&lt;/cite&gt;.&lt;/li&gt;
&lt;li&gt;Include the tested class name in the name of the test case.&lt;/li&gt;
&lt;li&gt;When multiple test cases exist for the same class, suffix the test case with
some hints about the special cases in each test case.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestSuperButtonInSpace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Test for super button behavior in space.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestSuperButtonInSpace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;DO&lt;/span&gt; &lt;span class="n"&gt;YOUR&lt;/span&gt; &lt;span class="n"&gt;SPACE&lt;/span&gt; &lt;span class="n"&gt;INITIALIZATION&lt;/span&gt; &lt;span class="n"&gt;HERE&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestSuperButtonOnEarth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Test for super button behavior on earth.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestSuperButtonOnEarth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;DO&lt;/span&gt; &lt;span class="n"&gt;YOUR&lt;/span&gt; &lt;span class="n"&gt;EARTH&lt;/span&gt; &lt;span class="n"&gt;INITIALIZATION&lt;/span&gt; &lt;span class="n"&gt;HERE&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;All methods that perform tests should be prefixed with &lt;cite&gt;test_&lt;/cite&gt;.&lt;/li&gt;
&lt;li&gt;If testing a specific method, include the exact name of the method, in the
test name, at the beginning, just after the &lt;cite&gt;test_&lt;/cite&gt; marker.&lt;/li&gt;
&lt;li&gt;When there are multiple tests for the same method, suffix the test with
a short underline (&amp;quot;_&amp;quot;) delimited summary. No need to add all details in the name.
Just make sure it is unique in the test case. Avoid long descriptions, you
can add everything in the docstring.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_getAllProperties_no_accounts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    An empty dictionary is returned if no accounts are defined.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="test-fixtures-setup-and-teardown"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;Test fixtures, setUp and tearDown&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Reusing base test cases and grouping code in setUp and tearDown are great
ways of reducing code duplications.&lt;/p&gt;
&lt;p&gt;Since this is a good thing, it does not need to be abused.
Don't forget that code and tests also need to be easy to read.&lt;/p&gt;
&lt;p&gt;We write test cases based on the class under test.
For example, when we have an object called Account which can have two
important states: Application and OS, we will write two test case
&lt;em&gt;AccountOSTestCase&lt;/em&gt; and &lt;em&gt;AccountApplicationTestCase&lt;/em&gt;.
This is why all tests from a specific test case will need to instantiate the
same object, and this is why is OK to create &lt;strong&gt;self.object_under_test&lt;/strong&gt;
instance in the &lt;em&gt;setUp&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As a raw rule, in the setUp try to only create raw instances which are
used in all tests, without calling any other code that change the state
of an object.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BadStorageTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    A test that is hard to read.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SomeStream&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StreamStorage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NewStoredObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;one&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object_1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NewStoredObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;two&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object_2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BadHandlerTestCase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_all_objects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Without arguments, returns all objects for the storage.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="c"&gt;# This test smells, since it had no arrange part.&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertContains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertContains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object_2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_filtered_objects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        A name can be specified to filter results.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="c"&gt;# This test smells, since it had no arrange part.&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;one&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertContains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertNotContains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object_2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BetterStorageTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    A test that is easier to read.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SomeStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StreamStorage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BadHandlerTestCase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_all_objects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Without arguments, returns all objects for the storage.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;object_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NewStoredObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object_1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;object_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NewStoredObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object_2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertContains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertContains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object_2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_all_objects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        A name can be specified to filter results.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;object_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NewStoredObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;one&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object_1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;object_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NewStoredObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;two&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object_2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;one&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertContains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertNotContains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object_2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Try to put as much cleanup code in the tearDown method and not after the
&lt;strong&gt;assert&lt;/strong&gt; block. If a test fails, the rest of the assert block is not
executed, and putting everything in a try/finally increase indentation.
You can register object for cleanup by using dedicated creation method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BadTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_someMethod_with_test_bad_cleanup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        When an assertion fails, cleanup is not called.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;some_file&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SomeFancy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;something&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getAllContent&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="c"&gt;# When assert fails, the remaining code is not executed.&lt;/span&gt;
        &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GoodTestCase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GoodTestCase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opened_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opened_files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c"&gt;# Pass or record the files which were not closed&lt;/span&gt;
                &lt;span class="c"&gt;# and fail with more details.&lt;/span&gt;
                &lt;span class="k"&gt;pass&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GoodTestCase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;openFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Creation method which also registers the object for cleanup.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;some_file&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opened_files&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_someMethod_with_test_bad_cleanup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        When an assertion fails, cleanup is still called via tearDown.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;openFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;some_file&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SomeFancy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;something&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getAllContent&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To reduce the need of tearDown and cleanup code, try to run each test on
new instances and avoid global or singleton objects.&lt;/p&gt;
&lt;p&gt;You can still reuse object, in case creating a new instance takes a long time,
as we want test to be fast.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tests-description-docstrings"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;Tests description - docstrings&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Good tests can help document and define what something is supposed to do,
so dedicate effort to write good docstrings.&lt;/p&gt;
&lt;p&gt;Each test should have a description (docstring) with information about the
purpose of the test or any other additional info that could help another
person to understand the test.&lt;/p&gt;
&lt;p&gt;Writing docstring for tests is not easy, but doing so will reduce the
WTF/minute.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Describe in simple plain English what you are testing and what is the
expected behaviour.&lt;/li&gt;
&lt;li&gt;Think of the test's docstring as an extension of documentation for the
method under tests.&lt;/li&gt;
&lt;li&gt;For integration tests add notes about pre-conditions or other requirements.&lt;/li&gt;
&lt;li&gt;Add a brief description and don't describe how the test is done.
Detailed information about the test should be available by reading
the code implementing the tests.
When code fails to speak for itself use inline comments.&lt;/li&gt;
&lt;li&gt;Avoid including the name of the method under tests. The test method name
should already include it.&lt;/li&gt;
&lt;li&gt;When testing for raised exceptions avoid adding the exception name in
the test description. Just inform that an exception is raised. By
reading the test code, it should be easy to get more details about the
exception.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are some tips from Jonathan Lange as a handy five-step guide:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Write the first docstring that comes to mind. It will almost certainly be:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;quot;&amp;quot;&amp;quot;Test that input is parsed correctly.&amp;quot;&amp;quot;&amp;quot;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Get rid of &amp;quot;Test that&amp;quot; or &amp;quot;Check that&amp;quot;. We know it's a test.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;quot;&amp;quot;&amp;quot;Input should be parsed correctly.&amp;quot;&amp;quot;&amp;quot;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Seriously?! Why'd you have to go and add &amp;quot;should&amp;quot;? It's a test,
it's all about &amp;quot;should&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;quot;&amp;quot;&amp;quot;Input is parsed correctly.&amp;quot;&amp;quot;&amp;quot;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&amp;quot;Correctly&amp;quot;, &amp;quot;properly&amp;quot;, and &amp;quot;as we expect&amp;quot; are all redundant.
Axe them too.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;quot;&amp;quot;&amp;quot;Input is parsed.&amp;quot;&amp;quot;&amp;quot;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Look at what's left. Is it saying anything at all?
If so, great. If not, consider adding something specific about the test
behaviour and perhaps even why it's desirable behaviour to have.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;quot;&amp;quot;&amp;quot;
Input is parsed into an immutable dict according to the config
schema, so we get config info without worrying about input
validation all the time.
&amp;quot;&amp;quot;&amp;quot;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Happy hacking!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="rerefences"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;Rerefences&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here are the pages I used to create this page.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://integralpath.blogs.com/thinkingoutloud/2005/09/principles_of_t.html"&gt;http://integralpath.blogs.com/thinkingoutloud/2005/09/principles_of_t.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://plus.google.com/115348217455779620753/posts/YA3ThKWhSAj"&gt;https://plus.google.com/115348217455779620753/posts/YA3ThKWhSAj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://c2.com/cgi/wiki?ArrangeActAssert"&gt;http://c2.com/cgi/wiki?ArrangeActAssert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/q/67299/539264"&gt;http://stackoverflow.com/q/67299/539264&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://agileprogrammer.com/2005/08/14/i-really-did-mean-it-avoid-setup-and-teardown/"&gt;http://agileprogrammer.com/2005/08/14/i-really-did-mean-it-avoid-setup-and-teardown/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://agilesoftwaredevelopment.com/blog/vaibhav/acceptance-testing-what-why-how"&gt;http://agilesoftwaredevelopment.com/blog/vaibhav/acceptance-testing-what-why-how&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</summary></entry></feed>